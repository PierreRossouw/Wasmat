// Compile.dwasm v0.1.20170723
// A small language with self-compiling compiler to WebAssembly

// Style conventions:
// Pointers and functions returning pointers start with a Capital letter
// Constants are ALL CAPS

// Constants
i32 SIZEINT := 4  // Most browsers currently only support 32bit sized WASM memories
i32 DEC0DE := 557785600  // Magic number -0x00dec0de - used for debugging

// Enums
i32 nodes_program    := 1  // root node
i32 nodes_fun        := 2
i32 nodes_block      := 3
i32 nodes_return     := 4
i32 nodes_variable   := 5
i32 nodes_parameter  := 6
i32 nodes_identifier := 7
i32 nodes_literal    := 8
i32 nodes_binary     := 9
i32 nodes_unary      := 10
i32 nodes_call       := 11
i32 nodes_if         := 12
i32 nodes_loop       := 13
i32 nodes_break      := 14
i32 nodes_continue   := 15
i32 nodes_hexwasm    := 16  // WebAssembly code binary literal

i32 tokens_identifier  := 43
i32 tokens_charLiteral := 46
i32 tokens_numLiteral  := 47
i32 tokens_true        := 48
i32 tokens_false       := 49
i32 tokens_lParen      := 50
i32 tokens_comma       := 51
i32 tokens_rParen      := 52
i32 tokens_fun         := 60
i32 tokens_return      := 61
i32 tokens_endfun      := 62
i32 tokens_hexwasm     := 63
i32 tokens_loop        := 70
i32 tokens_continue    := 71
i32 tokens_break       := 72
i32 tokens_endloop     := 73
i32 tokens_if          := 80
i32 tokens_then        := 81
i32 tokens_elseif      := 82
i32 tokens_else        := 83
i32 tokens_endif       := 84
i32 tokens_minPrec     := 92
i32 tokens_assign      := 93   // :=
i32 tokens_or          := 94
i32 tokens_xor         := 95
i32 tokens_and         := 96
i32 tokens_eq          := 97   // =
i32 tokens_ne          := 98   // <>
i32 tokens_lt          := 99   // <
i32 tokens_ltu         := 100  // <^
i32 tokens_le          := 101  // <=
i32 tokens_leu         := 102  // <=^
i32 tokens_gt          := 103  // >
i32 tokens_gtu         := 104  // >^
i32 tokens_ge          := 105  // >=
i32 tokens_geu         := 106  // >=^
i32 tokens_shl         := 107  // <<
i32 tokens_shr         := 108  // >>
i32 tokens_shru        := 109  // >>^
i32 tokens_rotl        := 110  // <-<
i32 tokens_rotr        := 111  // >->
i32 tokens_clz         := 113 
i32 tokens_ctz         := 114 
i32 tokens_cnt         := 115 
i32 tokens_add         := 116  // +
i32 tokens_sub         := 117  // -
i32 tokens_mul         := 118  // *
i32 tokens_div         := 119  // /
i32 tokens_divu        := 120
i32 tokens_mod         := 121
i32 tokens_modu        := 122
i32 tokens_not         := 123
i32 tokens_f64         := 124  // 0x7c
i32 tokens_f32         := 125  // 0x7d 
i32 tokens_i64         := 126  // 0x7e
i32 tokens_i32         := 127  // 0x7f
i32 tokens_bool        := 128  // synonym for i32

i32 error_eatToken := 1

// Structs
i32 string_length := 0
i32 string_Chars  := 4

i32 list_First := 0
i32 list_Last  := 4
i32 list_count := 8
i32 list_size  := 12

i32 item_Next   := 0
i32 item_Name   := 4
i32 item_Object := 8
i32 item_size   := 12

i32 token_kind   := 0
i32 token_Value  := 4
i32 token_line   := 8
i32 token_column := 12
i32 token_size   := 16

i32 node_1          := 0   // debugging marker
i32 node_2          := 4   // debugging info
i32 node_kind       := 8   // From the nodes_ enum
i32 node_index      := 12   // Zero based index number for funs, variables, parameters
i32 node_String     := 16  // Literal value, or fun/var/parameter name
i32 node_Scope      := 20  // Scope for program/block/loop/fun used for name resolution
i32 node_ANode      := 24  // Binary left, call fun, return expression, then block, or fun body
i32 node_BNode      := 28  // Binary/unary right, else block, fun return, variable assignment
i32 node_CNode      := 32  // If statement condition node
i32 node_Nodes      := 36  // List of child nodes for program/block, or fun locals
i32 node_ParamNodes := 40  // List of params for call/fun
i32 node_type       := 44  // From the tokens_ enum
i32 node_dataType   := 48  // inferred data type
i32 node_size       := 52

i32 scope_Node       := 0
i32 scope_index      := 4
i32 scope_Parent     := 8
i32 scope_Symbols    := 12
i32 scope_localIndex := 16
i32 scope_size       := 20

// Global variables
i32 Code             := 8
i32 Heap             := 8  // Memory management - reserve 0-7 for null pointers
i32 TokenList        := 0
i32 funIndex         := 0  // Next function index number
i32 CurrentTokenItem := 0
i32 CurrentToken     := 0
i32 CurrentScope     := 0
i32 GlobalScope      := 0
i32 RootNode         := 0
i32 Binary           := 0
i32 BinaryPointer    := 0
i32 emitGlobalCount  := 0
i32 emitFunCount     := 0
i32 CurrentFunNode   := 0

// The first function is automatically exported as 'main'
fun i32 main()  // export "main"  // TODO
  i32 length := load32(Code + string_length)
  i32 i := Alloc(string_Chars + length)  
  lexx()
  parse()
  emit(length)
  return Binary + string_length
endfun

// Memory management
fun i32 Alloc(i32 length)
  i32 r := Heap
  Heap := Heap + length
  if Heap mod SIZEINT then
    Heap := Heap + SIZEINT - Heap mod SIZEINT  // Fix the alignment
  endif
  return r
endfun

fun debug(i32 x)
  store32(Alloc(SIZEINT), 1 - DEC0DE)
  store32(Alloc(SIZEINT), x)
endfun

// Pascal-style strings: We store the length instead of using a null terminator
fun i32 NewString(i32 length)
  i32 String := Alloc(string_Chars + length)
  store32(String + string_length, length)
  return String
endfun

fun i32 strLen(i32 String)
  return load32(String + string_length)
endfun

fun i32 getchar(i32 String, i32 offset)
  return load8(String + string_Chars + offset)
endfun

fun setchar(i32 String, i32 offset, i32 chr)
  store8(String + string_Chars + offset, chr)
endfun

fun i32 Substring(i32 String, i32 offset, i32 length)
  if offset >= strLen(String) then
    length := 0
  endif
  if (offset + length) >= strLen(String) then
    length := strLen(String) - offset
  endif
  i32 R := NewString(length)
  loop
    if length = 0 then break endif
    length := length - 1
    setchar(R, length, getchar(String, offset + length))
  endloop
  return R
endfun

fun bool strCompare(i32 A, i32 B)
  i32 length := strLen(A)
  i32 offset := 0
  bool r := true
  if length = strLen(B) then
    loop
      if getchar(A, offset) <> getchar(B, offset) then
        r := false
        break
      endif
      if offset >= length then break endif
      offset := offset + 1
    endloop
  else
    r := false
  endif
  return r
endfun

fun bool stringCompare4(i32 V, i32 a)
  bool r := true
  i32 length := strLen(V)
  if length = 0 or length > 4 then
    r := false
  else
    if load32(V + string_Chars) <> a then r := false endif
  endif
  return r
endfun

fun bool stringCompare8(i32 V, i64 a)
  bool r := true
  i32 length := strLen(V)
  if length < 5 or length > 8 then
    r := false
  else
    if load64(V + string_Chars) <> a then r := false endif
  endif
  return r
endfun

// Lists
fun listAdd(i32 List, i32 Object)
  i32 Item := Alloc(item_size)
  store32(Item + item_Object, Object)
  if not load32(List + list_First) then
    store32(List + list_First, Item)
  else
    store32(load32(List + list_Last) + item_Next, Item) 
  endif
  store32(List + list_Last, Item) 
  store32(List + list_count, load32(List + list_count) + 1)
endfun

fun listAddName(i32 List, i32 Object, i32 Name)
  i32 Item := Alloc(item_size)
  store32(Item + item_Object, Object)
  store32(Item + item_Name, Name)
  if not load32(List + list_First) then
    store32(List + list_First, Item)
  else
    store32(load32(List + list_Last) + item_Next, Item)
  endif
  store32(List + list_Last, Item) 
  store32(List + list_count, load32(List + list_count) + 1)
endfun

// Find a string in a list
fun i32 ListSearch(i32 List, i32 FindName)
  i32 Item := load32(List + list_First)
  i32 Node := 0
  loop
    if not Item then break endif
    if strCompare(load32(Item + item_Name), FindName) then
      Node := load32(Item + item_Object)
      break
    endif
    Item := load32(Item + item_Next)
  endloop
  return Node
endfun

// Lexer XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

fun addToken(i32 kind, i32 Value, i32 line, i32 column)
  if not TokenList then
    TokenList := Alloc(list_size)
  endif
  i32 Token := Alloc(token_size)
  store32(Token + token_kind, kind)
  store32(Token + token_Value, Value)
  store32(Token + token_line, line)
  store32(Token + token_column, column)
  listAdd(TokenList, Token)
endfun

fun processToken(i32 Val, i32 line, i32 column)
  i32 kind := tokens_identifier
  if stringCompare4(Val, '(') then kind := tokens_lParen endif
  if stringCompare4(Val, ',') then kind := tokens_comma endif
  if stringCompare4(Val, ')') then kind := tokens_rParen endif
  if stringCompare4(Val, 'true') then kind := tokens_true endif
  if stringCompare8(Val, 'false') then kind := tokens_false endif
  if stringCompare4(Val, 'fun') then kind := tokens_fun endif
  if stringCompare8(Val, 'return') then kind := tokens_return endif
  if stringCompare8(Val, 'endfun') then kind := tokens_endfun endif
  if stringCompare4(Val, 'loop') then kind := tokens_loop endif
  if stringCompare8(Val, 'continue') then kind := tokens_continue endif
  if stringCompare8(Val, 'break') then kind := tokens_break endif
  if stringCompare8(Val, 'endloop') then kind := tokens_endloop endif
  if stringCompare4(Val, 'if') then kind := tokens_if endif
  if stringCompare4(Val, 'then') then kind := tokens_then endif
  if stringCompare4(Val, 'else') then kind := tokens_else endif
  if stringCompare8(Val, 'elseif') then kind := tokens_elseif endif
  if stringCompare8(Val, 'endif') then kind := tokens_endif endif
  if stringCompare4(Val, 'i32') then kind := tokens_i32 endif
  if stringCompare4(Val, 'i64') then kind := tokens_i64 endif
  if stringCompare4(Val, 'f32') then kind := tokens_f32 endif
  if stringCompare4(Val, 'f64') then kind := tokens_f64 endif
  if stringCompare4(Val, 'bool') then kind := tokens_bool endif
  if stringCompare4(Val, ':=') then kind := tokens_assign endif
  if stringCompare4(Val, 'or') then kind := tokens_or endif
  if stringCompare4(Val, 'xor') then kind := tokens_xor endif
  if stringCompare4(Val, 'and') then kind := tokens_and endif
  if stringCompare4(Val, '=') then kind := tokens_eq endif
  if stringCompare4(Val, '<>') then kind := tokens_ne endif
  if stringCompare4(Val, '<') then kind := tokens_lt endif
  if stringCompare4(Val, '<^') then kind := tokens_ltu endif
  if stringCompare4(Val, '<=') then kind := tokens_le endif
  if stringCompare4(Val, '<=^') then kind := tokens_leu endif
  if stringCompare4(Val, '>') then kind := tokens_gt endif
  if stringCompare4(Val, '>^') then kind := tokens_gtu endif
  if stringCompare4(Val, '>=') then kind := tokens_ge endif
  if stringCompare4(Val, '>=^') then kind := tokens_geu endif  
  if stringCompare4(Val, '<<') then kind := tokens_shl endif
  if stringCompare4(Val, '>>') then kind := tokens_shr endif
  if stringCompare4(Val, '>>^') then kind := tokens_shru endif
  if stringCompare4(Val, '<-<') then kind := tokens_rotl endif
  if stringCompare4(Val, '>->') then kind := tokens_rotr endif
  if stringCompare4(Val, '+') then kind := tokens_add endif
  if stringCompare4(Val, '-') then kind := tokens_sub endif
  if stringCompare4(Val, '*') then kind := tokens_mul endif
  if stringCompare4(Val, '/') then kind := tokens_div endif
  if stringCompare4(Val, 'mod') then kind := tokens_mod endif
  if stringCompare4(Val, 'modu') then kind := tokens_modu endif
  if stringCompare4(Val, 'not') then kind := tokens_not endif
  if stringCompare4(Val, 'clz') then kind := tokens_clz endif
  if stringCompare4(Val, 'ctz') then kind := tokens_ctz endif
  if stringCompare4(Val, 'cnt') then kind := tokens_cnt endif
  addToken(kind, Val, line, column)
endfun

fun bool isAlpha(i32 chr)
  return (chr >= 'a' and chr <= 'z') or (chr >= 'A' and chr <= 'Z') or (chr = '_')
endfun

fun bool isNumber(i32 chr, i32 hex)
  bool num := false
  if chr >= '0' and chr <= '9' then
    num := true
  elseif hex then
    if (chr >= 'a' and chr <= 'f') or (chr >= 'A' and chr <= 'F') then 
      num := true 
    endif
  endif
  return num
endfun

fun bool isHexwasm(i32 chr1, i32 chr2, i32 chr3)
  return chr1 = 'x' and isNumber(chr2, 1) and isNumber(chr3, 1)
endfun

fun bool isPunctuator(i32 chr)
  return chr = '(' or chr = ')' or chr = ','
endfun

fun bool isOperatorChar(i32 chr)
  return chr = '=' or chr = '+' or chr = '-' or chr = '/' or chr = '^' or
         chr = '<' or chr = '>' or chr = '*' or chr = ':' 
endfun

fun lexx()
  i32 pos := -1
  i32 line := 1
  i32 column := 0
  i32 length := strLen(Code)
  i32 chr := 0
  i32 start := 0
  i32 Val := 0
  bool hex := false
  loop
    pos := pos + 1
    column := column + 1
    chr := getchar(Code, pos) 
    if chr = 10 then  // newline
      line := line + 1
      column := 0
    elseif isHexwasm(chr, getchar(Code, pos + 1), getchar(Code, pos + 2)) then
      Val := Substring(Code, pos - 1, 4)
      setchar(Val, 0, '0')
      addToken(tokens_hexwasm, Val, line, column)
      pos := pos + 2
      column := column + 2
    elseif isAlpha(chr) then
      start := pos
      loop
        if (not isAlpha(chr)) and (not isNumber(chr, 0)) then
          pos := pos - 1
          column := column - 1
          break
        endif
        pos := pos + 1
        column := column + 1
        chr := getchar(Code, pos)
      endloop
      Val := Substring(Code, start, pos - start + 1)
      processToken(Val, line, column)
    elseif chr = 39 then  // single quote
      pos := pos + 1
      column := column + 1
      chr := getchar(Code, pos)
      start := pos
      loop
        if chr = 39 then break endif
        pos := pos + 1
        column := column + 1
        chr := getchar(Code, pos)
      endloop
      Val := Substring(Code, start, pos - start)
      addToken(tokens_charLiteral, Val, line, column)
    elseif isNumber(chr, 0) or ((chr = '-') and isNumber(getchar(Code, pos + 1), 0)) then
      start := pos
      hex := false
      loop
        if (not isNumber(chr, hex)) and (chr <> '-') then
          if start + 1 = pos and chr = 'x' then
            hex := true
          else
            pos := pos - 1
            column := column - 1
            break
          endif
        endif
        pos := pos + 1
        column := column + 1
        chr := getchar(Code, pos)
      endloop
      Val := Substring(Code, start, pos - start + 1)
      addToken(tokens_numLiteral, Val, line, column)
    elseif (chr = '/') and (getchar(Code, pos + 1) = '/') then
      loop
        if chr = 10 or chr = 13 then  // LF or CR
          column := 0
          line := line + 1
          break
        endif
        pos := pos + 1
        column := column + 1
        chr := getchar(Code, pos)
      endloop
    elseif isPunctuator(chr) then
      Val := Substring(Code, pos, 1)
      processToken(Val, line, column)
    elseif isOperatorChar(chr) then
      if isOperatorChar(getchar(Code, pos + 1)) then
        if isOperatorChar(getchar(Code, pos + 2)) then
          Val := Substring(Code, pos, 3)
          pos := pos + 2
          column := column + 2
        else
          Val := Substring(Code, pos, 2)
          pos := pos + 1
          column := column + 1
        endif
      else
        Val := Substring(Code, pos, 1)
      endif
      processToken(Val, line, column)
    endif
    if pos >= length then break endif
  endloop
endfun

// Scoper XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

fun pushScope(i32 Node)
  i32 Scope := Alloc(scope_size)
  store32(Scope + scope_Symbols, Alloc(list_size))
  store32(Scope + scope_Node, Node)
  if CurrentScope then
    store32(Scope + scope_index, load32(CurrentScope + scope_index) + 1)
    store32(Scope + scope_Parent, CurrentScope)
  endif
  store32(Node + node_Scope, Scope)
  CurrentScope := Scope
endfun

fun popScope()
  if CurrentScope then
    CurrentScope := load32(CurrentScope + scope_Parent)
  endif
endfun

fun i32 LookupFunctionScope(i32 Scope)
  i32 FunScope := Scope
  loop
    if not FunScope then break endif
    if load32(load32(FunScope + scope_Node) + node_kind) then break endif
    FunScope := load32(FunScope + scope_Parent)
  endloop
  return FunScope
endfun

fun scopeRegister(i32 Scope, i32 Name, i32 Node)
  i32 nodeKind := load32(Node + node_kind)
  i32 FunScope := 0
  i32 nextIndex := 0
  listAddName(load32(Scope + scope_Symbols), Node, Name)
  if nodeKind = nodes_variable or nodeKind = nodes_parameter then
    FunScope := LookupFunctionScope(Scope)
    nextIndex := load32(FunScope + scope_localIndex)
    store32(Node + node_Scope, FunScope)
    store32(Node + node_index, nextIndex)
    store32(FunScope + scope_localIndex, nextIndex + 1)
  endif
endfun

fun i32 ScopeResolve(i32 Scope, i32 Name)
  i32 Node := 0
  i32 RecurseScope := Scope
  loop
    if not RecurseScope then break endif
    Node := ListSearch(load32(RecurseScope + scope_Symbols), Name)
    if Node then break endif
    RecurseScope := load32(RecurseScope + scope_Parent)
  endloop
  return Node
endfun

// Parser XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

fun i32 NewNode()
  i32 Node := Alloc(node_size)
  store32(Node + node_Scope, CurrentScope)
  store32(Node + node_1, 2 - DEC0DE)
  store32(Node + node_2, Node)
  return Node
endfun

fun next()
  CurrentTokenItem := load32(CurrentTokenItem + item_Next)
  if CurrentTokenItem then
    CurrentToken := load32(CurrentTokenItem + item_Object)
  else
    CurrentToken := 0
  endif
endfun

fun bool isBinaryOperator(i32 Token)
  i32 kind := load32(Token + token_kind)
  return kind = tokens_assign or kind = tokens_add or kind = tokens_sub or kind = tokens_mul or
         kind = tokens_div or kind = tokens_mod or kind = tokens_or or kind = tokens_and or
         kind = tokens_lt or kind = tokens_eq or kind = tokens_ne or kind = tokens_lt or
         kind = tokens_le or kind = tokens_gt or kind = tokens_ge or kind = tokens_shl or
         kind = tokens_shr or kind = tokens_xor or kind = tokens_ltu or kind = tokens_leu or 
         kind = tokens_gtu or kind = tokens_geu or kind = tokens_shru or kind = tokens_rotl or
         kind = tokens_rotr or kind = tokens_modu
endfun

fun bool isUnaryOperator(i32 Token)
  i32 kind := load32(Token + token_kind)
  return kind = tokens_sub or kind = tokens_not or kind = tokens_cnt or kind = tokens_clz or 
         kind = tokens_ctz
endfun

fun bool isLiteral(i32 Token)
  i32 kind := load32(Token + token_kind)
  return kind = tokens_numLiteral or kind = tokens_charLiteral or 
         kind = tokens_true or kind = tokens_false
endfun

fun bool isNativeType(i32 Token)
  i32 kind := load32(Token + token_kind)
  return kind = tokens_i32 or kind = tokens_i64 or kind = tokens_f32 or kind = tokens_f64 or 
         kind = tokens_bool
endfun

fun eatToken(i32 kind)
  if load32(CurrentToken + token_kind) = kind then
    next()
  else
    debug(error_eatToken)  // error number
    debug(kind)
    debug(load32(CurrentToken + token_kind))
    debug(CurrentToken)
  endif
endfun

fun i32 ParseFunParams()
  i32 Params := Alloc(list_size)
  i32 type := 0
  i32 FunParamNode := 0
  i32 Name := 0
  eatToken(tokens_lParen)
  loop
    type := load32(CurrentToken + token_kind)
    if type = tokens_rParen then break endif
    next()
    FunParamNode := NewNode()
    store32(FunParamNode + node_kind, nodes_parameter)
    store32(FunParamNode + node_type, type)
    store32(FunParamNode + node_dataType, type)
    Name := load32(CurrentToken + token_Value)
    store32(FunParamNode + node_String, Name)
    listAddName(Params, FunParamNode, Name)
    next()
    if load32(CurrentToken + token_kind) <> tokens_comma then break endif
    next()
  endloop
  eatToken(tokens_rParen)
  return Params
endfun

fun i32 ParseFunBlock()
  i32 Node := NewNode()
  i32 BodyList := Alloc(list_size)
  i32 ChildNode := 0
  store32(Node + node_kind, nodes_block)
  store32(Node + node_Nodes, BodyList)
  store32(Node + node_Scope, CurrentScope)
  loop
    if not CurrentToken then break endif
    if load32(CurrentToken + token_kind) = tokens_endfun then break endif
    ChildNode := ParseStatement()
    if not ChildNode then break endif
    listAdd(BodyList, ChildNode)
  endloop
  return Node
endfun

fun i32 ParseFunDeclaration(i32 type, i32 Name)
  i32 Node := NewNode()
  i32 Locals := Alloc(list_size)
  i32 ParamList := 0
  i32 ParamName := 0
  i32 ParamItem := 0
  store32(Node + node_kind, nodes_fun)
  store32(Node + node_index, funIndex)
  funIndex := funIndex + 1
  store32(Node + node_type, type)
  store32(Node + node_dataType, type)
  store32(Node + node_String, Name)
  store32(Node + node_Nodes, Locals)
  scopeRegister(CurrentScope, Name, Node)
  ParamList := ParseFunParams()
  store32(Node + node_ParamNodes, ParamList)
  pushScope(Node)
  ParamItem := load32(ParamList + list_First)
  loop
    if not ParamItem then break endif
    ParamName := load32(ParamItem + item_Name)
    scopeRegister(CurrentScope, ParamName, load32(ParamItem + item_Object))
    ParamItem := load32(ParamItem + item_Next)
  endloop
  store32(Node + node_ANode, ParseFunBlock())
  popScope()
  eatToken(tokens_endfun)
  return Node
endfun

fun i32 ParseFun()
  i32 funType := 0
  i32 Name := 0
  if isNativeType(CurrentToken) then
    funType := load32(CurrentToken + token_kind)
    next()
  endif
  Name := load32(CurrentToken + token_Value)
  next()
  return ParseFunDeclaration(funType, Name)
endfun

fun i32 ParseBreak()
  i32 Node := NewNode()
  store32(Node + node_kind, nodes_break)
  eatToken(tokens_break)
  return Node
endfun

fun i32 ParseContinue()
  i32 Node := NewNode()
  store32(Node + node_kind, nodes_continue)
  eatToken(tokens_continue)
  return Node
endfun

fun i32 ParseLiteral()
  i32 Node := NewNode()
  store32(Node + node_kind, nodes_literal)
  store32(Node + node_String, load32(CurrentToken + token_Value))
  store32(Node + node_type, load32(CurrentToken + token_kind))
  next()
  return Node
endfun

fun i32 ParseIdentifier()
  i32 Node := NewNode()
  store32(Node + node_kind, nodes_identifier)
  store32(Node + node_String, load32(CurrentToken + token_Value))
  store32(Node + node_type, load32(CurrentToken + token_kind))
  next()
  return Node
endfun

fun i32 ParseCallParams()
  i32 ParamList := Alloc(list_size)
  eatToken(tokens_lParen)
  loop
    if load32(CurrentToken + token_kind) = tokens_rParen then break endif
    listAdd(ParamList, ParseExpression(tokens_minPrec))
    if load32(CurrentToken + token_kind) <> tokens_comma then break endif
    eatToken(tokens_comma)
  endloop
  eatToken(tokens_rParen)
  return ParamList
endfun

fun i32 ParseCallExpression(i32 Callee)
  i32 Node := NewNode()
  store32(Node + node_kind, nodes_call)
  store32(Node + node_ANode, Callee)
  store32(Node + node_ParamNodes, ParseCallParams())
  return Node
endfun

fun i32 parseUnaryExpression()
  i32 Node := NewNode()
  store32(Node + node_kind, nodes_unary)
  store32(Node + node_type, load32(CurrentToken + token_kind))
  store32(Node + node_String, load32(CurrentToken + token_Value))
  next()
  store32(Node + node_BNode, ParseExpression(tokens_add))
  return Node
endfun

fun i32 ParsePrefix()
  i32 Node := 0
  if isLiteral(CurrentToken) then
    Node := ParseLiteral()
  elseif load32(CurrentToken + token_kind) = tokens_identifier then
    Node := ParseIdentifier()
  elseif load32(CurrentToken + token_kind) = tokens_lParen then
    next()
    Node := ParseExpression(tokens_minPrec)
    eatToken(tokens_rParen)
  elseif isUnaryOperator(CurrentToken) then
    Node := parseUnaryExpression()
  endif
  return Node
endfun

fun i32 ParseBinaryExpression(i32 level, i32 Left)
  i32 Node := 0
  i32 precedence := load32(CurrentToken + token_kind)  // node_kind doubles as the precedence
  if level > precedence then
    Node := Left
  else
    Node := NewNode()
    store32(Node + node_kind, nodes_binary)
    store32(Node + node_type, load32(CurrentToken + token_kind))
    store32(Node + node_String, load32(CurrentToken + token_Value))
    store32(Node + node_ANode, Left)
    next()
    store32(Node + node_BNode, ParseExpression(precedence))
  endif
  return Node
endfun

fun i32 ParseInfix(i32 level, i32 Left)
  i32 Node := 0
  if isBinaryOperator(CurrentToken) then
    Node := ParseBinaryExpression(level, Left)
  elseif load32(CurrentToken + token_kind) = tokens_lParen then
    Node := ParseCallExpression(Left)
  else
    Node := Left
  endif
  return Node
endfun

fun i32 ParseExpression(i32 level)
  i32 Node := 0
  i32 Expr := 0
  i32 kind := load32(CurrentToken + token_kind)
  if kind = tokens_break then
    Node := ParseBreak()
  elseif kind = tokens_continue then
    Node := ParseContinue()
  else
    Node := ParsePrefix()
    loop
      if not CurrentToken then break endif
      Expr := ParseInfix(level, Node)
      if Expr = 0 or Expr = Node then break endif
      Node := Expr
    endloop
  endif
  return Node
endfun

fun i32 ParseHexwasmStatement()
  i32 Node := NewNode()
  i32 Scope := 0
  store32(Node + node_kind, nodes_hexwasm)
  i32 Wasm := strToI32(load32(CurrentToken + token_Value))
  store32(Node + node_type, Wasm)
  eatToken(tokens_hexwasm)
  return Node
endfun

fun i32 ParseReturnStatement()
  i32 Node := NewNode()
  i32 Scope := 0
  eatToken(tokens_return)
  store32(Node + node_kind, nodes_return)
  store32(Node + node_ANode, ParseExpression(tokens_minPrec))
  Scope := CurrentScope
  loop
    if not Scope then break endif
    if load32(load32(Scope + scope_Node) + node_kind) = nodes_fun then break endif
    Scope := load32(Scope + scope_Parent)
  endloop
  store32(load32(Scope + scope_Node) + node_ANode, Node)
  return Node
endfun

fun i32 ParseIfBlock()
  i32 Node := NewNode()
  i32 BodyList := Alloc(list_size)
  i32 ChildNode := 0
  store32(Node + node_kind, nodes_block)
  store32(Node + node_Nodes, BodyList)
  store32(Node + node_Scope, CurrentScope)
  loop
    if not CurrentToken then break endif
    if load32(CurrentToken + token_kind) = tokens_else then break endif
    if load32(CurrentToken + token_kind) = tokens_elseif then break endif
    if load32(CurrentToken + token_kind) = tokens_endif then break endif
    ChildNode := ParseStatement()
    if not ChildNode then break endif
    listAdd(BodyList, ChildNode)
  endloop
  return Node
endfun

fun i32 ParseIfStatement(bool isElseif)
  i32 Node := NewNode()
  if not isElseif then eatToken(tokens_if) endif
  store32(Node + node_kind, nodes_if)
  store32(Node + node_CNode, ParseExpression(tokens_minPrec))
  eatToken(tokens_then)
  pushScope(Node)
  store32(Node + node_ANode, ParseIfBlock())
  popScope()
  if load32(CurrentToken + token_kind) = tokens_elseif then
    eatToken(tokens_elseif)
    pushScope(Node)
    store32(Node + node_BNode, ParseIfStatement(true))
    popScope()
  endif
  if load32(CurrentToken + token_kind) = tokens_else then
    eatToken(tokens_else)
    pushScope(Node)
    store32(Node + node_BNode, ParseIfBlock())
    popScope()
  endif
  if not isElseif then eatToken(tokens_endif) endif
  return Node
endfun

fun i32 ParseLoopBlock()
  i32 Node := NewNode()
  i32 BodyList := Alloc(list_size)
  i32 ChildNode := 0
  store32(Node + node_kind, nodes_block)
  store32(Node + node_Nodes, BodyList)
  store32(Node + node_Scope, CurrentScope)
  loop
    if not CurrentToken then break endif
    if load32(CurrentToken + token_kind) = tokens_endloop then break endif
    ChildNode := ParseStatement()
    if not ChildNode then break endif
    listAdd(BodyList, ChildNode)
  endloop
  return Node
endfun

fun i32 ParseLoopStatement()
  i32 Node := NewNode()
  eatToken(tokens_loop)
  store32(Node + node_kind, nodes_loop)
  pushScope(Node)
  store32(Node + node_ANode, ParseLoopBlock())
  popScope()
  eatToken(tokens_endloop)
  return Node
endfun

fun i32 ParseDeclaration()
  i32 FunNode := 0
  i32 FunLocalsList := 0
  i32 type := load32(CurrentToken + token_kind)
  next()
  i32 Name := load32(CurrentToken + token_Value)
  next()
  i32 Node := NewNode()
  store32(Node + node_kind, nodes_variable)
  store32(Node + node_type, type)
  store32(Node + node_dataType, type)
  store32(Node + node_String, Name)
  scopeRegister(CurrentScope, Name, Node)
  eatToken(tokens_assign)
  store32(Node + node_BNode, ParseExpression(tokens_minPrec))
  if load32(CurrentScope + scope_Parent) then
    FunNode := load32(LookupFunctionScope(CurrentScope) + scope_Node)
    FunLocalsList := load32(FunNode + node_Nodes)
    if not FunLocalsList then
      FunLocalsList := Alloc(list_size)
      store32(FunNode + node_Nodes, FunLocalsList)
    endif
    listAdd(FunLocalsList, Node)
  endif
  return Node
endfun

fun i32 ParseStatement()
  i32 Node := 0
  i32 kind := load32(CurrentToken + token_kind)
  if kind = tokens_fun then
    eatToken(tokens_fun)
    Node := ParseFun()
  elseif isNativeType(CurrentToken) then
    Node := ParseDeclaration()
  elseif kind = tokens_return then
    Node := ParseReturnStatement()
  elseif kind = tokens_hexwasm then
    Node := ParseHexwasmStatement()
  elseif kind = tokens_if then
    Node := ParseIfStatement(false)
  elseif kind = tokens_loop then
    Node := ParseLoopStatement()
  else
    Node := ParseExpression(tokens_minPrec)
  endif
  return Node
endfun

fun parse()
  RootNode := NewNode()
  CurrentTokenItem := load32(TokenList + list_First)
  CurrentToken := load32(CurrentTokenItem + item_Object)
  store32(RootNode + node_kind, nodes_program)
  pushScope(RootNode)
  GlobalScope := CurrentScope  
  i32 Child := 0
  i32 BodyList := Alloc(list_size)
  store32(RootNode + node_Nodes, BodyList)
  loop
    if not CurrentToken then break endif
    Child := ParseStatement()
    if not Child then break endif
    listAdd(BodyList, Child)
  endloop
endfun

// Compiler XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

fun i32 strToI32(i32 V)  // Supports ints and 0x-prefixed hex
  bool hex := false
  i32 i := 0
  i32 length := strLen(V)
  i32 offset := 0
  i32 c := 0
  if length >= 3 then
    if getchar(V, 0) = '0' and getchar(V, 1) = 'x' then
      hex := true
    elseif getchar(V, 0) = '-' and getchar(V, 1) = '0' and getchar(V, 2) = 'x' 
      hex := true
    endif
  endif
  if hex then
    offset := 2
    if getchar(V, 2) = 'x' then offset := 3 endif
    loop
      if offset >= length then break endif
      i := i * 16
      c := getchar(V, offset)
      if c >= '0' and c <= '9' then
        i := i + c - '0'
      elseif c >= 'a' and c <= 'f' then
        i := i + c - 'a' + 10
      elseif c >= 'A' and c <= 'F' then
        i := i + c - 'A' + 10
      endif
      offset := offset + 1
    endloop
  else
    loop
      if offset >= length then break endif
      i := i * 10
      c := getchar(V, offset)
      if c >= '0' and c <= '9' then
        i := i + c - '0'
      endif
      offset := offset + 1
    endloop
  endif
  if getchar(V, 0) = '-' then i := -i endif
  return i
endfun

fun i64 strToI64(i32 V)
  bool hex := false
  i64 i := 0
  i32 length := strLen(V)
  i32 offset := 0
  i32 c := 0
  if length >= 3 then
    if getchar(V, 0) = '0' and getchar(V, 1) = 'x' then
      hex := true
    endif
  endif
  if hex then
    offset := 2
    loop
      if offset >= length then break endif
      i := i * 16
      c := getchar(V, offset)
      if c >= '0' and c <= '9' then
        i := i + extend64(c) - '0'
      elseif c >= 'a' and c <= 'f' then
        i := i + extend64(c) - 'a' + 10
      elseif c >= 'A' and c <= 'F' then
        i := i + extend64(c) - 'A' + 10
      endif
      offset := offset + 1
    endloop
  else
    loop
      if offset >= length then break endif
      i := i * 10
      c := getchar(V, offset)
      if c >= '0' and c <= '9' then
        i := i + extend64(c) - '0'
      endif
      offset := offset + 1
    endloop
  endif
  if getchar(V, 0) = '-' then i := -i endif
  return i
endfun

fun emitByte(i32 byte)
  store8(BinaryPointer, byte)
  BinaryPointer := BinaryPointer + 1
endfun

fun emitI32(i32 byte)
  store32(BinaryPointer, byte)
  BinaryPointer := BinaryPointer + 4
endfun

fun i32 uLebLen(i32 i)
  i32 length := 0
  if i <= 127 then
    length := 1
  elseif i <= 16383 then
    length := 2
  elseif i <= 2097151 then
    length := 3
  elseif i <= 268435455 then
    length := 4
  else
    length := 5
  endif
  return length
endfun

fun emitUleb(i32 i)  // en.wikipedia.org/wiki/LEB128
  loop
    if i < 128 then break endif
    emitByte(128 + (i mod 128))
    i := i / 128  
  endloop
  emitByte(i)
endfun

fun emitSleb(i32 i)
  if i >= 0 then 
    loop
      if i < 64 then break endif
      emitByte(128 + (i mod 128))
      i := i / 128
    endloop
    emitByte(i)
  else
    loop
      if i >= -64 then break endif
      emitByte((i mod 128) - 128)
      i := i / 128
    endloop
    emitByte(i - 128)
  endif
endfun

fun emitSleb64(i64 i)
  if i >= 0 then 
    loop
      if i < 64 then break endif
      emitByte(wrap32(128 + (i mod 128)))
      i := i / 128
    endloop
    emitByte(wrap32(i))
  else
    loop
      if i >= -64 then break endif
      emitByte(wrap32((i mod 128) - 128))
      i := i / 128
    endloop
    emitByte(wrap32(i - 128))
  endif
endfun

fun fixUlebGuess(i32 Start, i32 offset)
  i32 Copy := BinaryPointer
  if offset > 0 then
    loop
      Copy := Copy - 1
      if Copy < Start then break endif
      store8(Copy + offset, load8(Copy))
    endloop
  endif
endfun

fun emitType(i32 Node)
  i32 dataType := 0
  i32 ParamList := load32(Node + node_ParamNodes)
  emitByte(0x60)  // fun type
  emitUleb(load32(ParamList + list_count)) 
  i32 ParamItem := load32(ParamList + list_First)
  loop
    if not ParamItem then break endif
    dataType := load32(load32(ParamItem + item_Object) + node_type)
    if dataType = tokens_bool then dataType := tokens_i32 endif
    emitByte(dataType)
    ParamItem := load32(ParamItem + item_Next)
  endloop
  i32 returnType := load32(Node + node_type)
  if returnType then
    emitByte(0x01)  // return count
    if returnType = tokens_bool then returnType := tokens_i32 endif
    emitByte(returnType)
  else
    emitByte(0x00)  // return count
  endif
endfun

fun emitTypeSection()
  i32 Start := 0
  i32 count := 0
  i32 Item := 0
  i32 Node := 0
  i32 length := 0
  i32 offset := 0
  i32 BodyList := load32(RootNode + node_Nodes)
  i32 Skip := BinaryPointer
  if BodyList then
    if load32(BodyList + list_count) then
      emitByte(0x01)  // Type section
      emitByte(0x00)  // section size (guess)
      Start := BinaryPointer 
      emitByte(0x00)  // types count (guess)  
      count := 0
      Item := load32(BodyList + list_First)
      loop
        Node := load32(Item + item_Object)
        if load32(Node + node_kind) = nodes_fun then
          emitType(Node)
          count := count + 1
          emitFunCount := emitFunCount + 1
        endif
        Item := load32(Item + item_Next)
        if not Item then break endif
      endloop
      length := BinaryPointer - Start
      offset := uLebLen(count) + uLebLen(length) - 2
      fixUlebGuess(Start, offset)
      BinaryPointer := Start - 1
      emitUleb(length)
      emitUleb(count)
      BinaryPointer := BinaryPointer + length - 1
    endif
  endif
  if not emitFunCount then BinaryPointer := Skip endif
endfun

fun emitFunctionSection()
  i32 Start := 0
  i32 counter := 0
  i32 length := 0
  i32 offset := 0
  if emitFunCount then
    emitByte(0x03)  // Function section
    emitByte(0x00)  // section size (guess)
    Start := BinaryPointer 
    emitUleb(emitFunCount)  // types count
    loop
      if counter >= emitFunCount then break endif
      emitUleb(counter)
      counter := counter + 1
    endloop
    length := BinaryPointer - Start
    offset := uLebLen(length) - 1
    fixUlebGuess(Start, offset)
    BinaryPointer := Start - 1
    emitUleb(length)
    BinaryPointer := BinaryPointer + length
  endif
endfun

// Memory is exported as 'mem' and is a fixed size
// This compiler takes about 1MB to compile
fun emitMemorySection()
  emitByte(0x05)  // Memory section
  emitUleb(0x03)  // Size in bytes
  emitByte(0x01)  // Count. A maximum of 1 currently in WebAssembly
  emitByte(0x00)  // Resizable flag
  emitByte(0x70)  // Pages (A page is 64kb)
endfun

fun emitNativeGlobal(i32 Node)
  i32 dataType := load32(Node + node_type)  // Native type
  if dataType = tokens_f64 then 
    emitByte(dataType)
    emitByte(0x01)  // Mutable
    emitByte(0x44)  // f64.const
  elseif dataType = tokens_f32 then 
    emitByte(dataType)
    emitByte(0x01)  // Mutable
    emitByte(0x43)  // f32.const
  elseif dataType = tokens_i64 then
    emitByte(dataType)
    emitByte(0x01)  // Mutable
    emitByte(0x42)  // i64.const
  else  // i32 or bool
    emitByte(tokens_i32)
    emitByte(0x01)  // Mutable
    emitByte(0x41)  // i32.const
  endif
  i32 Value := load32(load32(Node + node_BNode) + node_String)
  i32 nodeType := load32(load32(Node + node_BNode) + node_type) 
  if nodeType = tokens_true then 
    emitByte(0x01) 
  elseif nodeType = tokens_false then 
    emitByte(0x00) 
  elseif dataType = tokens_i64 then
    emitSleb64(strToI64(Value))
  else
    emitSleb(strToI32(Value))
  endif
  emitByte(0x0b)  // end
endfun

fun emitGlobalSection()
  i32 Start := 0
  i32 count := 0
  i32 Item := 0
  i32 Node := 0
  i32 length := 0
  i32 offset := 0
  i32 BodyList := load32(RootNode + node_Nodes)
  i32 Skip := BinaryPointer
  if BodyList then
    if load32(BodyList + list_count) then
      emitByte(0x06)  // Section code
      emitByte(0x00)  // Section size (guess)
      Start := BinaryPointer 
      emitByte(0x00)  // Globals count (guess)
      Item := load32(BodyList + list_First)
      loop
        Node := load32(Item + item_Object)
        if load32(Node + node_kind) = nodes_variable then
          emitNativeGlobal(Node)
          count := count + 1
          emitGlobalCount := emitGlobalCount + 1
        endif
        Item := load32(Item + item_Next)
        if not Item then break endif
      endloop
      length := BinaryPointer - Start
      offset := uLebLen(count) + uLebLen(length) - 2
      fixUlebGuess(Start, offset)
      BinaryPointer := Start - 1
      emitUleb(length)
      emitUleb(count)
      BinaryPointer := BinaryPointer + length - 1
    endif
  endif
  if not emitGlobalCount then BinaryPointer := Skip endif
endfun

fun emitExportSection()
  i32 funCount := 0
  i32 Start := 0
  i32 length := 0
  i32 offset := 0
  i32 BodyList := load32(RootNode + node_Nodes)
  if BodyList then
    funCount := load32(BodyList + list_count)
    if funCount then
      emitByte(0x07)  // Export section
      emitByte(0x00)  // Section size (guess)
      Start := BinaryPointer 
      emitByte(0x02)  // Export count
      emitByte(0x04)  // 1: Name length
      emitByte(0x6d)  // m
      emitByte(0x61)  // a
      emitByte(0x69)  // i
      emitByte(0x6e)  // n
      emitByte(0x00)  // Type: function
      emitUleb(0x00)  // Function number 0
      emitByte(0x03)  // 2: Name length
      emitByte(0x6d)  // m
      emitByte(0x65)  // e
      emitByte(0x6d)  // m
      emitByte(0x02)  // Type: memory
      emitByte(0x00)  // Memory number 0 
      length := BinaryPointer - Start
      offset := uLebLen(length) - 1
      fixUlebGuess(Start, offset)
      BinaryPointer := Start - 1
      emitUleb(length)
      BinaryPointer := BinaryPointer + length
    endif
  endif
endfun

fun emitAssignment(i32 Node)
  i32 ResolvedNode := ScopeResolve(CurrentScope, load32(load32(Node + node_ANode) + node_String))
  i32 dataType := load32(ResolvedNode + node_type)
  i32 BNode := load32(Node + node_BNode)
  store32(Node + node_dataType, dataType)
  store32(BNode + node_dataType, dataType)
  emitNode(BNode)
  if load32(ResolvedNode + node_Scope) = GlobalScope then
    emitByte(0x24)  // set_global
  else
    emitByte(0x21)  // set_local
  endif
  emitUleb(load32(ResolvedNode + node_index))
endfun

fun emitOperator(i32 type, i32 dataType)
  if dataType = tokens_f64 then
    if type = tokens_eq   then emitByte(0x61) endif
    if type = tokens_ne   then emitByte(0x62) endif
    if type = tokens_lt   then emitByte(0x63) endif
    if type = tokens_gt   then emitByte(0x64) endif
    if type = tokens_le   then emitByte(0x65) endif
    if type = tokens_ge   then emitByte(0x66) endif
    if type = tokens_add  then emitByte(0xa0) endif
    if type = tokens_sub  then emitByte(0xa1) endif
    if type = tokens_mul  then emitByte(0xa2) endif
    if type = tokens_div  then emitByte(0xa3) endif
  elseif dataType = tokens_f32 then
    if type = tokens_eq   then emitByte(0x5b) endif
    if type = tokens_ne   then emitByte(0x5c) endif
    if type = tokens_lt   then emitByte(0x5d) endif
    if type = tokens_gt   then emitByte(0x5e) endif
    if type = tokens_le   then emitByte(0x5f) endif
    if type = tokens_ge   then emitByte(0x60) endif
    if type = tokens_add  then emitByte(0x92) endif
    if type = tokens_sub  then emitByte(0x93) endif
    if type = tokens_mul  then emitByte(0x94) endif
    if type = tokens_div  then emitByte(0x95) endif
  elseif dataType = tokens_i64 then
    if type = tokens_not  then emitByte(0x50) endif
    if type = tokens_eq   then emitByte(0x51) endif
    if type = tokens_ne   then emitByte(0x52) endif
    if type = tokens_lt   then emitByte(0x53) endif
    if type = tokens_ltu  then emitByte(0x54) endif
    if type = tokens_gt   then emitByte(0x55) endif
    if type = tokens_gtu  then emitByte(0x56) endif
    if type = tokens_le   then emitByte(0x57) endif
    if type = tokens_leu  then emitByte(0x58) endif
    if type = tokens_ge   then emitByte(0x59) endif
    if type = tokens_geu  then emitByte(0x5a) endif
    if type = tokens_clz  then emitByte(0x79) endif
    if type = tokens_ctz  then emitByte(0x7a) endif
    if type = tokens_cnt  then emitByte(0x7b) endif
    if type = tokens_add  then emitByte(0x7c) endif
    if type = tokens_sub  then emitByte(0x7d) endif
    if type = tokens_mul  then emitByte(0x7e) endif
    if type = tokens_div  then emitByte(0x7f) endif
    if type = tokens_divu then emitByte(0x80) endif
    if type = tokens_mod  then emitByte(0x81) endif
    if type = tokens_modu then emitByte(0x82) endif
    if type = tokens_and  then emitByte(0x83) endif
    if type = tokens_or   then emitByte(0x84) endif
    if type = tokens_xor  then emitByte(0x85) endif
    if type = tokens_shl  then emitByte(0x86) endif
    if type = tokens_shr  then emitByte(0x87) endif
    if type = tokens_shru then emitByte(0x88) endif
    if type = tokens_rotl then emitByte(0x89) endif
    if type = tokens_rotr then emitByte(0x8a) endif
  else
    if type = tokens_not  then emitByte(0x45) endif
    if type = tokens_eq   then emitByte(0x46) endif
    if type = tokens_ne   then emitByte(0x47) endif
    if type = tokens_lt   then emitByte(0x48) endif
    if type = tokens_ltu  then emitByte(0x49) endif
    if type = tokens_gt   then emitByte(0x4a) endif
    if type = tokens_gtu  then emitByte(0x4b) endif
    if type = tokens_le   then emitByte(0x4c) endif
    if type = tokens_leu  then emitByte(0x4d) endif
    if type = tokens_ge   then emitByte(0x4e) endif
    if type = tokens_geu  then emitByte(0x4f) endif
    if type = tokens_clz  then emitByte(0x67) endif
    if type = tokens_ctz  then emitByte(0x68) endif
    if type = tokens_cnt  then emitByte(0x69) endif
    if type = tokens_add  then emitByte(0x6a) endif
    if type = tokens_sub  then emitByte(0x6b) endif
    if type = tokens_mul  then emitByte(0x6c) endif
    if type = tokens_div  then emitByte(0x6d) endif
    if type = tokens_divu then emitByte(0x6e) endif
    if type = tokens_mod  then emitByte(0x6f) endif
    if type = tokens_modu then emitByte(0x70) endif
    if type = tokens_and  then emitByte(0x71) endif
    if type = tokens_or   then emitByte(0x72) endif
    if type = tokens_xor  then emitByte(0x73) endif
    if type = tokens_shl  then emitByte(0x74) endif
    if type = tokens_shr  then emitByte(0x75) endif
    if type = tokens_shru then emitByte(0x76) endif
    if type = tokens_rotl then emitByte(0x77) endif
    if type = tokens_rotr then emitByte(0x78) endif
  endif
endfun

fun emitUnary(i32 Node)
  i32 type := load32(Node + node_type)
  i32 dataType := load32(Node + node_dataType)
  if type = tokens_sub then
    if dataType = tokens_f64 then
      emitByte(0x44)  // f64.const
      emitI32(0) 
      emitI32(0) 
    elseif dataType = tokens_f32 then
      emitByte(0x43)  // f32.const
      emitI32(0) 
    elseif dataType = tokens_i64 then
      emitByte(0x42)  // i64.const 
      emitByte(0x00)  // 0
    else
      emitByte(0x41)  // i32.const 
      emitByte(0x00)  // 0
    endif
  endif
  emitNode(load32(Node + node_BNode))
  emitOperator(type, dataType)
endfun

fun emitIdentifier(i32 Node)
  i32 ResolvedNode := ScopeResolve(CurrentScope, load32(Node + node_String))
  i32 dataType := load32(ResolvedNode + node_dataType)
  if dataType then
    store32(Node + node_dataType, dataType)
  endif
  if load32(ResolvedNode + node_Scope) = GlobalScope then
    emitByte(0x23)  // get_global
  else
    emitByte(0x20)  // get_local
  endif
  emitUleb(load32(ResolvedNode + node_index))
endfun

fun emitNumLiteral(i32 Node, i32 dataType)
  if dataType = tokens_f64 then
    emitByte(0x44)  // f64.const
    // TODO emitF64(strToF64(load32(Node + node_String)))
  elseif dataType = tokens_f32 then
    emitByte(0x43)  // f32.const
    // TODO emitF32(strToF32(load32(Node + node_String)))
  elseif dataType = tokens_i64 then
    emitByte(0x42)  // i64.const
    emitSleb64(strToI64(load32(Node + node_String)))  // TODO
  else
    emitByte(0x41)  // i32.const
    emitSleb(strToI32(load32(Node + node_String)))
  endif
endfun

fun emitCharLiteral(i32 Node, i32 dataType)
  i32 Name := load32(Node + node_String)
  if dataType = tokens_i64 then
    emitByte(0x42)  // i64.const
    if strLen(Name) > 4 then
      emitSleb64(load64(Name + string_Chars))
    else
      emitSleb(load32(Name + string_Chars))
    endif
  else
    emitByte(0x41)  // i32.const
    emitSleb(load32(Name + string_Chars))
  endif
endfun

fun emitLiteral(i32 Node)
  i32 type := load32(Node + node_type)
  i32 dataType := load32(Node + node_dataType)
  if type = tokens_numLiteral then
    emitNumLiteral(Node, dataType)
  elseif type = tokens_charLiteral then
    emitCharLiteral(Node, dataType)
  elseif type = tokens_true then
    emitByte(0x41)  // i32.const
    emitByte(0x01)  // 1
  elseif type = tokens_false then
    emitByte(0x41)  // i32.const
    emitByte(0x00)  // 0
  endif
endfun

fun emitFunCallArguments(i32 CallNode, i32 FunNode)
  i32 ArgumentList := load32(CallNode + node_ParamNodes)
  i32 ArgumentItem := load32(ArgumentList + list_First)
  i32 ArgumentNode := 0
  i32 ParamList := load32(FunNode + node_ParamNodes)
  i32 ParamItem := load32(ParamList + list_First)
  i32 ParamNode := 0
  loop
    if not ArgumentItem then break endif
    ArgumentNode := load32(ArgumentItem + item_Object)
    ParamNode := load32(ParamItem + item_Object)
    store32(ArgumentNode + node_dataType, load32(ParamNode + node_dataType))
    emitNode(ArgumentNode)
    ArgumentItem := load32(ArgumentItem + item_Next)
    ParamItem := load32(ParamItem + item_Next)
  endloop
endfun

fun emitCallArguments(i32 CallNode, i32 data_Type)
  i32 ArgumentList := load32(CallNode + node_ParamNodes)
  i32 ArgumentItem := load32(ArgumentList + list_First)
  i32 ArgumentNode := 0
  loop
    if not ArgumentItem then break endif
    ArgumentNode := load32(ArgumentItem + item_Object)
    store32(ArgumentNode + node_dataType, data_Type)
    emitNode(ArgumentNode)
    ArgumentItem := load32(ArgumentItem + item_Next)
  endloop
endfun

fun emitCallArgumentsI32I64(i32 CallNode)
  i32 ArgumentList := load32(CallNode + node_ParamNodes)
  i32 ArgumentItem := load32(ArgumentList + list_First)
  i32 ArgumentNode := 0
  bool tail := false
  loop
    if not ArgumentItem then break endif
    ArgumentNode := load32(ArgumentItem + item_Object)
    if tail then
      store32(ArgumentNode + node_dataType, tokens_i64)
    else    
      store32(ArgumentNode + node_dataType, tokens_i32)
    endif
    emitNode(ArgumentNode)
    ArgumentItem := load32(ArgumentItem + item_Next)
    tail := true
  endloop
endfun

fun emitCall(i32 Node)
  i32 ResolvedNode := 0
  i32 Name := load32(load32(Node + node_ANode) + node_String)
  if stringCompare8(Name, 'i64_i32') or stringCompare8(Name, 'wrap32') then
    emitCallArguments(Node, tokens_i64)
    emitByte(0xa7)  // i32.wrap/i64
  elseif stringCompare8(Name, 'f32_i32') then
    emitCallArguments(Node, tokens_f32)
    emitByte(0xa8)  // i32.trunc_s/f32
  elseif stringCompare8(Name, 'f32_i32u') then
    emitCallArguments(Node, tokens_f32)
    emitByte(0xa9)  // i32.trunc_u/f32
  elseif stringCompare8(Name, 'f64_i32') then
    emitCallArguments(Node, tokens_f64)
    emitByte(0xaa)  // i32.trunc_s/f64
  elseif stringCompare8(Name, 'f64_i32u') then
    emitCallArguments(Node, tokens_f64)
    emitByte(0xab)  // i32.trunc_u/f64
  elseif stringCompare8(Name, 'i32_i64') or stringCompare8(Name, 'extend64') then
    emitCallArguments(Node, tokens_i32)
    emitByte(0xac)  // i64.extend_s/i32
  elseif stringCompare8(Name, 'i32_i64u') then
    emitCallArguments(Node, tokens_i32)
    emitByte(0xad)  // i64.extend_u/i32
  elseif stringCompare8(Name, 'f32_i64') then
    emitCallArguments(Node, tokens_f32)
    emitByte(0xae)  // i64.trunc_s/f32
  elseif stringCompare8(Name, 'f32_i64u') then
    emitCallArguments(Node, tokens_f32)
    emitByte(0xaf)  // i64.trunc_u/f32
  elseif stringCompare8(Name, 'f64_i64') then
    emitCallArguments(Node, tokens_f64)
    emitByte(0xb0)  // i64.trunc_s/f64
  elseif stringCompare8(Name, 'f64_i64u') then
    emitCallArguments(Node, tokens_f64)
    emitByte(0xb1)  // i64.trunc_u/f64
  elseif stringCompare8(Name, 'i32_f32') then
    emitCallArguments(Node, tokens_i32)
    emitByte(0xb2)  // f32.convert_s/i32    
  elseif stringCompare8(Name, 'i32_f32u') then
    emitCallArguments(Node, tokens_i32)
    emitByte(0xb3)  // f32.convert_u/i32   
  elseif stringCompare8(Name, 'i64_f32') then
    emitCallArguments(Node, tokens_i64)
    emitByte(0xb4)  // f32.convert_s/i64
  elseif stringCompare8(Name, 'i64_f32u') then
    emitCallArguments(Node, tokens_i64)
    emitByte(0xb5)  // f32.convert_u/i64
  elseif stringCompare8(Name, 'f64_f32') then
    emitCallArguments(Node, tokens_f64)
    emitByte(0xb6)  // f32.demote/f64
  elseif stringCompare8(Name, 'i32_f64') then
    emitCallArguments(Node, tokens_i32)
    emitByte(0xb7)  // f64.convert_s/i32
  elseif stringCompare8(Name, 'i32_f64u') then
    emitCallArguments(Node, tokens_i32)
    emitByte(0xb8)  // f64.convert_u/i32
  elseif stringCompare8(Name, 'i64_f64') then
    emitCallArguments(Node, tokens_i64)
    emitByte(0xb9)  // f64.convert_s/i64
  elseif stringCompare8(Name, 'i64_f64u') then
    emitCallArguments(Node, tokens_i64)
    emitByte(0xba)  // f64.convert_u/i64
  elseif stringCompare8(Name, 'f32_f64') then
    emitCallArguments(Node, tokens_f32)
    emitByte(0xbb)  // f64.promote/f32
  elseif stringCompare8(Name, 'store32') then
    emitCallArguments(Node, tokens_i32)
    emitByte(0x36)  // i32.store
    emitByte(0x00)  // alignment
    emitByte(0x00)  // offset
  elseif stringCompare8(Name, 'store64') then
    emitCallArgumentsI32I64(Node)
    emitByte(0x37)  // i64.store
    emitByte(0x00)  // alignment
    emitByte(0x00)  // offset
  elseif stringCompare8(Name, 'store8') then
    emitCallArguments(Node, tokens_i32)
    emitByte(0x3a)  // i32.store8
    emitByte(0x00)  // alignment
    emitByte(0x00)  // offset
  elseif stringCompare8(Name, 'load64') then
    emitCallArguments(Node, tokens_i32)
    emitByte(0x29)  // i64.load
    emitByte(0x00)  // alignment
    emitByte(0x00)  // offset
  elseif stringCompare8(Name, 'load32') then
    emitCallArguments(Node, tokens_i32)
    emitByte(0x28)  // i32.load
    emitByte(0x00)  // alignment
    emitByte(0x00)  // offset
  elseif stringCompare8(Name, 'load8') then
    emitCallArguments(Node, tokens_i32)
    emitByte(0x2d)  // i32.load8
    emitByte(0x00)  // alignment
    emitByte(0x00)  // offset
  else
    ResolvedNode := ScopeResolve(CurrentScope, Name)
    emitFunCallArguments(Node, ResolvedNode)
    emitByte(0x10)  // call
    emitUleb(load32(ResolvedNode + node_index))
  endif
endfun

fun emitBlock(i32 Node)
  i32 Scope := load32(Node + node_Scope)
  if Scope then
    CurrentScope := Scope
  endif
  i32 BlockList := load32(Node + node_Nodes)
  i32 Item := load32(BlockList + list_First)
  loop
    if not Item then break endif
    emitNode(load32(Item + item_Object))
    Item := load32(Item + item_Next)
  endloop
  if Scope then
    CurrentScope := load32(CurrentScope + scope_Parent)
  endif
endfun

fun emitIf(i32 Node)
  emitNode(load32(Node + node_CNode))  // If condition expression
  emitByte(0x04)  // if
  emitByte(0x40)  // void
  emitNode(load32(Node + node_ANode))  // Then block
  i32 ElseBlock := load32(Node + node_BNode)
  if ElseBlock then
    emitByte(0x05)  // else
    emitNode(ElseBlock)
  endif
  emitByte(0x0b)  // end
endfun

fun i32 loopLevel() 
  i32 Scope := CurrentScope
  i32 level := 0
  loop
    if not Scope then break endif
    if load32(load32(Scope + scope_Node) + node_kind) = nodes_loop then break endif
    level := level + 1
    Scope := load32(Scope + scope_Parent)
  endloop
  return level
endfun

fun emitLoop(i32 Node)
  emitByte(0x02)  // block
  emitByte(0x40)  // void 
  emitByte(0x03)  // loop
  emitByte(0x40)  // void 
  emitNode(load32(Node + node_ANode))
  emitByte(0x0c)  // br
  emitByte(0x00)  // level 
  emitByte(0x0b)  // end
  emitByte(0x0b)  // end
endfun

fun i32 inferCallDataType(i32 Node)
  i32 dataType := 0
  i32 Name := load32(Node + node_String)
  i32 ResolvedNode := 0
  if stringCompare8(Name, 'load64')       then dataType := tokens_i64
  elseif stringCompare8(Name, 'load32')   then dataType := tokens_i32
  elseif stringCompare8(Name, 'load8')    then dataType := tokens_i32
  elseif stringCompare8(Name, 'extend64') then dataType := tokens_i64
  elseif stringCompare8(Name, 'wrap32')   then dataType := tokens_i32
  elseif stringCompare8(Name, 'f32_i32')  then dataType := tokens_i32
  elseif stringCompare8(Name, 'f32_i32u') then dataType := tokens_i32
  elseif stringCompare8(Name, 'f64_i32')  then dataType := tokens_i32
  elseif stringCompare8(Name, 'f64_i32u') then dataType := tokens_i32
  elseif stringCompare8(Name, 'i32_i64')  then dataType := tokens_i64
  elseif stringCompare8(Name, 'i32_i64u') then dataType := tokens_i64
  elseif stringCompare8(Name, 'f32_i64')  then dataType := tokens_i64
  elseif stringCompare8(Name, 'f32_i64u') then dataType := tokens_i64
  elseif stringCompare8(Name, 'f64_i64')  then dataType := tokens_i64
  elseif stringCompare8(Name, 'f64_i64u') then dataType := tokens_i64
  elseif stringCompare8(Name, 'i32_f32')  then dataType := tokens_f32
  elseif stringCompare8(Name, 'i32_f32u') then dataType := tokens_f32
  elseif stringCompare8(Name, 'i64_f32')  then dataType := tokens_f32
  elseif stringCompare8(Name, 'i64_f32u') then dataType := tokens_f32
  elseif stringCompare8(Name, 'f64_f32')  then dataType := tokens_f32
  elseif stringCompare8(Name, 'i32_f64')  then dataType := tokens_f64
  elseif stringCompare8(Name, 'i32_f64u') then dataType := tokens_f64
  elseif stringCompare8(Name, 'i64_f64')  then dataType := tokens_f64
  elseif stringCompare8(Name, 'i64_f64u') then dataType := tokens_f64
  elseif stringCompare8(Name, 'f32_f64')  then dataType := tokens_f64
  else
    ResolvedNode := ScopeResolve(CurrentScope, Name)
    dataType := load32(ResolvedNode + node_dataType)
  endif
  return dataType
endfun

fun i32 inferDataType(i32 Node)
  i32 dataType := 0
  i32 ResolvedNode := 0
  store32(Node + node_1, 4 - DEC0DE)  // TODO: delete this
  i32 kind := load32(Node + node_kind)
  if kind = nodes_binary then
    dataType := inferDataType(load32(Node + node_ANode))
    if not dataType then
      dataType := inferDataType(load32(Node + node_BNode))
    endif
  elseif kind = nodes_identifier then
    ResolvedNode := ScopeResolve(CurrentScope, load32(Node + node_String))
    dataType := load32(ResolvedNode + node_dataType)
  elseif kind = nodes_unary then
    dataType := inferDataType(load32(Node + node_BNode))
  elseif kind = nodes_call then
    store32(Node + node_1, 5 - DEC0DE)  // TODO: delete this
    dataType := inferCallDataType(load32(Node + node_ANode))
  endif
  return dataType
endfun

fun emitBinary(i32 Node)
  i32 type := load32(Node + node_type)
  i32 dataType := load32(Node + node_dataType)
  i32 ANode := load32(Node + node_ANode)
  i32 BNode := load32(Node + node_BNode)
  if type = tokens_assign then
    emitAssignment(Node)
  else
    if not dataType then
      dataType := inferDataType(Node)
      store32(Node + node_dataType, dataType)
    endif
    store32(ANode + node_dataType, dataType)
    store32(BNode + node_dataType, dataType)
    emitNode(ANode)
    emitNode(BNode)
    emitOperator(type, dataType)
  endif
endfun

fun emitVariable(i32 Node)
  i32 type := load32(Node + node_type)
  i32 BNode := load32(Node + node_BNode)
  store32(BNode + node_dataType, type)  // We know the BNode result type now
  emitNode(BNode)
  emitByte(0x21)  // set_local
  emitUleb(load32(Node + node_index))
endfun

fun emitReturn(i32 Node)
  i32 ANode := load32(Node + node_ANode)
  i32 dataType := load32(CurrentFunNode + node_dataType)
  store32(Node + node_dataType, dataType)
  store32(ANode + node_dataType, dataType)
  emitNode(ANode)
endfun

fun emitNode(i32 Node)
  i32 kind := load32(Node + node_kind)
  if kind = nodes_block then
    emitBlock(Node)
  elseif kind = nodes_binary then
    emitBinary(Node)
  elseif kind = nodes_unary then
    emitUnary(Node)
  elseif kind = nodes_call then
    emitCall(Node)
  elseif kind = nodes_return then
    emitReturn(Node)
  elseif kind = nodes_if then
    emitIf(Node)
  elseif kind = nodes_loop then
    emitLoop(Node)
  elseif kind = nodes_hexwasm then
    emitByte(load32(Node + node_type))
  elseif kind = nodes_break then
    emitByte(0x0c)  // br
    emitUleb(loopLevel() + 1)
  elseif kind = nodes_continue then
    emitByte(0x0c)  // br
    emitUleb(loopLevel())
  elseif kind = nodes_literal then
    emitLiteral(Node)
  elseif kind = nodes_identifier then
    emitIdentifier(Node)
  elseif kind = nodes_variable then
    emitVariable(Node)
  endif
endfun

fun emitFunNode(i32 Node)
  CurrentFunNode := Node
  i32 dataType := 0
  emitByte(0x00)  // Function size (guess)
  i32 Start := BinaryPointer
  i32 LocalList := load32(Node + node_Nodes)
  emitUleb(load32(LocalList + list_count))
  i32 LocalItem := load32(LocalList + list_First)
  loop
    if not LocalItem then break endif
    emitByte(0x01)  // count
    dataType := load32(load32(LocalItem + item_Object) + node_type)
    if dataType = tokens_bool then dataType := tokens_i32 endif
    emitByte(dataType)
    LocalItem := load32(LocalItem + item_Next)
  endloop
  emitNode(load32(Node + node_ANode))  // Body block node
  emitByte(0x0b)  // end
  i32 length := BinaryPointer - Start
  i32 offset := uLebLen(length) - 1
  fixUlebGuess(Start, offset)
  BinaryPointer := Start - 1
  emitUleb(length)
  BinaryPointer := BinaryPointer + length
endfun

fun emitCodeSection()
  i32 Start := 0
  i32 BodyList := 0
  i32 FunItem := 0
  i32 FunNode := 0
  i32 length := 0
  i32 offset := 0
  if emitFunCount then
    emitByte(0x0a)  // Code section
    emitByte(0x00)  // Section size (guess)
    Start := BinaryPointer 
    emitUleb(emitFunCount)
    BodyList := load32(RootNode + node_Nodes)
    FunItem := load32(BodyList + list_First)
    loop
      FunNode := load32(FunItem + item_Object)
      if load32(FunNode + node_kind) = nodes_fun then
        emitFunNode(FunNode)
      endif
      FunItem := load32(FunItem + item_Next)
      if not FunItem then break endif
    endloop
    length := BinaryPointer - Start
    offset := uLebLen(length) - 1
    fixUlebGuess(Start, offset)
    BinaryPointer := Start - 1
    emitUleb(length)
    BinaryPointer := BinaryPointer + length
  endif
endfun

fun emit(i32 length)
  Binary := NewString(length + 256)  // Heuristic: binary will be smaller than length(source) + 256
  BinaryPointer := Binary + string_Chars
  CurrentScope := load32(RootNode + node_Scope)
  emitByte(0x00)  // Wasm magic: 00 61 73 6d
  emitByte(0x61)  // a
  emitByte(0x73)  // s
  emitByte(0x6d)  // m
  emitI32(1)      // Wasm version
  emitTypeSection()
  emitFunctionSection()
  emitMemorySection()
  emitGlobalSection()
  emitExportSection()
  emitCodeSection()
  store32(Binary + string_length, BinaryPointer - (Binary + string_Chars))  // Fix up the length
endfun

// Pierre Rossouw 2017 
// https://github.com/PierreRossouw/Wasmat
