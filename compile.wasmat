// Compile.wasmat v0.0.20170704
// A toy language with self-compiling compiler to WebAssembly
// Only a minimal subset of WebAssemblyis implemented, just enough to self-compile
// The goal is to have a compiler simple enough to eaily read and understand
// Most reserved words and built-in functions compile to a single WebAssembly instruction
// As a convention, pointers and functions returning pointers start with a Capital letter
// Pierre Rossouw 04 July 2017 https://github.com/PierreRossouw/Wasmat

// Most browsers only support 32bit WASM for now
i32 sizeInt := 4

// Enums
i32 nodes_program    := 1
i32 nodes_block      := 2
i32 nodes_binary     := 3
i32 nodes_unary      := 4
i32 nodes_call       := 5
i32 nodes_return     := 6
i32 nodes_if         := 7
i32 nodes_loop       := 8
i32 nodes_break      := 9
i32 nodes_continue   := 10
i32 nodes_fun        := 11
i32 nodes_variable   := 12
i32 nodes_parameter  := 13
i32 nodes_literal    := 14

i32 tokens_identifier  := 43   // 2b
i32 tokens_charLiteral := 46   // 2e
i32 tokens_numLiteral  := 47   // 2f
i32 tokens_lParen      := 50   // 32
i32 tokens_comma       := 51   // 33
i32 tokens_rParen      := 52   // 34
i32 tokens_fun         := 60   // 3c
i32 tokens_return      := 61   // 3d
i32 tokens_endfun      := 62   // 3e
i32 tokens_loop        := 70   // 46
i32 tokens_continue    := 71   // 47
i32 tokens_break       := 72   // 48
i32 tokens_endloop     := 73   // 49
i32 tokens_if          := 80   // 50 
i32 tokens_then        := 82   // 52
i32 tokens_else        := 83   // 53
i32 tokens_endif       := 84   // 54
i32 tokens_minPrec     := 99   // 63
i32 tokens_assign      := 100  // 64  :=
i32 tokens_or          := 101  // 65
i32 tokens_and         := 102  // 66
i32 tokens_eq          := 110  // 6e  =
i32 tokens_ne          := 111  // 6f  <>
i32 tokens_lt          := 112  // 70  <
i32 tokens_le          := 113  // 71  <=
i32 tokens_gt          := 114  // 72  >
i32 tokens_ge          := 115  // 73  >=
i32 tokens_add         := 118  // 76  +
i32 tokens_sub         := 119  // 77  -
i32 tokens_mul         := 120  // 78  *
i32 tokens_div         := 121  // 79  /
i32 tokens_mod         := 122  // 7a
i32 tokens_not         := 123  // 7b
i32 tokens_f64         := 124  // 7c
i32 tokens_f32         := 125  // 7d 
i32 tokens_i64         := 126  // 7e
i32 tokens_i32         := 127  // 7f

// Structs
i32 string_length := 8
i32 string_Chars  := 12

i32 list_First := 8
i32 list_Last  := 12
i32 list_count := 16
i32 list_size  := 20

i32 item_Next   := 8
i32 item_Name   := 12
i32 item_Object := 16
i32 item_size   := 20

i32 token_kind   := 8
i32 token_Value  := 12
i32 token_line   := 16
i32 token_column := 20
i32 token_size   := 24

i32 node_kind       := 8   // from the nodes_ enum
i32 node_type       := 12  // from the tokens_ enum
i32 node_index      := 16  // 0 based index number for funs, variables, parameters
i32 node_String     := 20  // literal value or fun/var/parameter name
i32 node_Scope      := 24  // scope for program/block/loop/fun
i32 node_ANode      := 28  // binary left, call callee, return expression, then block, fun body
i32 node_BNode      := 32  // binary/unary right, else block, fun return, variable assignment
i32 node_CNode      := 36  // if statement condition
i32 node_Nodes      := 40  // node list for program/block/fun locals
i32 node_ParamNodes := 44  // param node list for call/fun
i32 node_size       := 48

i32 scope_Node       := 8
i32 scope_index      := 12 
i32 scope_Parent     := 16 
i32 scope_Symbols    := 20 
i32 scope_localIndex := 24
i32 scope_size       := 28

// Global variables
i32 Heap             := 4  // Memory management - reserve 0-3 for null pointers
i32 TokenList        := 0
i32 funIndex         := 0  // Next function index number
i32 CurrentTokenItem := 0
i32 CurrentToken     := 0
i32 CurrentScope     := 0
i32 GlobalScope      := 0
i32 RootNode         := 0
i32 Binary           := 0
i32 BinaryPointer    := 0
i32 emitGlobalCount  := 0
i32 emitFunCount     := 0

fun i32 main()
  return compile()
endfun

// Dummy entries to simplify the parser
fun store32(i32 Location, i32 value) 
endfun                               

fun store8(i32 Location, i32 value) 
endfun

fun i32 load32(i32 Location) 
  return 0
endfun

fun i32 load8(i32 Location) 
  return 0
endfun

// Memory management
fun i32 Alloc(i32 len)
  i32 r := Heap
  Heap := Heap + len
  if Heap mod sizeInt then
    Heap := Heap + sizeInt - Heap mod sizeInt  // fix the alignment
  endif
  return r
endfun

fun debug(i32 X)
  i32 D := Alloc(8)
  store32(D, 0 - 557785600)  // Magic number 0x00dec0de
  store32(D + 4, X)
endfun

// Pascal-style strings: We store the length instead of using a null terminator
fun i32 NewString(i32 len)
  i32 String := Alloc(string_Chars + len)
  store32(String, 1 - 557785600)  // Magic number 0x00dec0de
  store32(String + 4, String)  // this.address
  store32(String + string_length, len)
  return String
endfun

fun i32 NewList()
  i32 List := Alloc(list_size)
  store32(List, 2 - 557785600)  // Magic number 0x00dec0de
  store32(List + 4, List) 
  return List
endfun

fun i32 NewItem()
  i32 Item := Alloc(item_size)
  store32(Item, 3 - 557785600)  // Magic number 0x00dec0de
  store32(Item + 4, Item) 
  return Item
endfun

fun i32 NewToken()
  i32 Token := Alloc(token_size)
  store32(Token, 4 - 557785600)  // Magic number 0x00dec0de
  store32(Token + 4, Token)
  return Token
endfun

fun i32 NewNode()
  i32 Node := Alloc(node_size)
  store32(Node, 5 - 557785600)  // Magic number 0x00dec0de
  store32(Node + 4, Node)
  store32(Node + node_Scope, CurrentScope)
  return Node
endfun

fun i32 NewScope()
  i32 Scope := Alloc(scope_size)
  store32(Scope, 6 - 557785600)  // Magic number 0x00dec0de
  store32(Scope + 4, Scope)
  store32(Scope + scope_Symbols, NewList())
  return Scope
endfun

fun i32 strLen(i32 String)
  return load32(String + string_length)
endfun

fun i32 getchar(i32 String, i32 offset)
  return load8(String + string_Chars + offset)
endfun

fun setchar(i32 String, i32 offset, i32 chr)
  store8(String + string_Chars + offset, chr)
endfun

fun i32 Substring(i32 String, i32 offset, i32 length)
  if offset >= strLen(String) then
    length := 0
  endif
  if (offset + length) >= strLen(String) then
    length := strLen(String) - offset
  endif
  i32 R := NewString(length)
  loop
    if length = 0 then break endif
    length := length - 1
    setchar(R, length, getchar(String, offset + length))
  endloop
  return R
endfun

fun i32 strCompare(i32 A, i32 B)
  i32 len := strLen(A)
  i32 offset := 0
  i32 r := 1
  if len = strLen(B) then
    loop
      if getchar(A, offset) <> getchar(B, offset) then
        r := 0
        break
      endif
      if offset >= len then break endif
      offset := offset + 1
    endloop
  else
    r := 0
  endif
  return r
endfun

fun i32 strcomp1(i32 V, i32 a)
  i32 r := 1
  if strLen(V) <> 1 then
    r := 0
  else
    if getchar(V, 0) <> a then r := 0 endif
  endif
  return r
endfun

// Crappy helper funs
fun i32 strcomp2(i32 V, i32 a, i32 b)
  i32 r := 1
  if strLen(V) <> 2 then
    r := 0
  else
    if getchar(V, 0) <> a then r := 0 endif
    if getchar(V, 1) <> b then r := 0 endif
  endif
  return r
endfun

fun i32 strcomp3(i32 V, i32 a, i32 b, i32 c) 
  i32 r := 1
  if strLen(V) <> 3 then
    r := 0
  else
    if getchar(V, 0) <> a then r := 0 endif
    if getchar(V, 1) <> b then r := 0 endif
    if getchar(V, 2) <> c then r := 0 endif
  endif
  return r
endfun

fun i32 strcomp4(i32 V, i32 a, i32 b, i32 c, i32 d)
  i32 r := 1
  if strLen(V) <> 4 then
    r := 0
  else
    if getchar(V, 0) <> a then r := 0 endif
    if getchar(V, 1) <> b then r := 0 endif
    if getchar(V, 2) <> c then r := 0 endif
    if getchar(V, 3) <> d then r := 0 endif
  endif
  return r
endfun

fun i32 strcomp5(i32 V, i32 a, i32 b, i32 c, i32 d, i32 e)
  i32 r := 1
  if strLen(V) <> 5 then
    r := 0
  else
    if getchar(V, 0) <> a then r := 0 endif
    if getchar(V, 1) <> b then r := 0 endif
    if getchar(V, 2) <> c then r := 0 endif
    if getchar(V, 3) <> d then r := 0 endif
    if getchar(V, 4) <> e then r := 0 endif
  endif
  return r
endfun

fun i32 strcomp6(i32 V, i32 a, i32 b, i32 c, i32 d, i32 e, i32 f)
  i32 r := 1
  if strLen(V) <> 6 then
    r := 0
  else
    if getchar(V, 0) <> a then r := 0 endif
    if getchar(V, 1) <> b then r := 0 endif
    if getchar(V, 2) <> c then r := 0 endif
    if getchar(V, 3) <> d then r := 0 endif
    if getchar(V, 4) <> e then r := 0 endif
    if getchar(V, 5) <> f then r := 0 endif
  endif
  return r
endfun

fun i32 strcomp7(i32 V, i32 a, i32 b, i32 c, i32 d, i32 e, i32 f, i32 g)
  i32 r := 1
  if strLen(V) <> 7 then
    r := 0
  else
    if getchar(V, 0) <> a then r := 0 endif
    if getchar(V, 1) <> b then r := 0 endif
    if getchar(V, 2) <> c then r := 0 endif
    if getchar(V, 3) <> d then r := 0 endif
    if getchar(V, 4) <> e then r := 0 endif
    if getchar(V, 5) <> f then r := 0 endif
    if getchar(V, 6) <> g then r := 0 endif
  endif
  return r
endfun

fun i32 strcomp8(i32 V, i32 a, i32 b, i32 c, i32 d, i32 e, i32 f, i32 g, i32 h)
  i32 r := 1
  if strLen(V) <> 8 then
    r := 0
  else
    if getchar(V, 0) <> a then r := 0 endif
    if getchar(V, 1) <> b then r := 0 endif
    if getchar(V, 2) <> c then r := 0 endif
    if getchar(V, 3) <> d then r := 0 endif
    if getchar(V, 4) <> e then r := 0 endif
    if getchar(V, 5) <> f then r := 0 endif
    if getchar(V, 6) <> g then r := 0 endif
    if getchar(V, 7) <> h then r := 0 endif
  endif
  return r
endfun

// Lists
fun listAdd(i32 List, i32 Object)
  i32 Item := NewItem()
  store32(Item + item_Object, Object)
  if not load32(List + list_First) then
    store32(List + list_First, Item)
  else
    store32(load32(List + list_Last) + item_Next, Item) 
  endif
  store32(List + list_Last, Item) 
  store32(List + list_count, load32(List + list_count) + 1)
endfun

fun listAddName(i32 List, i32 Object, i32 Name)
  i32 Item := NewItem()
  store32(Item + item_Object, Object)
  store32(Item + item_Name, Name)
  if not load32(List + list_First) then
    store32(List + list_First, Item)
  else
    store32(load32(List + list_Last) + item_Next, Item) 
  endif
  store32(List + list_Last, Item) 
  store32(List + list_count, load32(List + list_count) + 1)
endfun

// Find a string in a list
fun i32 ListSearch(i32 List, i32 FindName)
  i32 Item := load32(List + list_First)
  i32 Node := 0
  loop
    if not Item then break endif
    if strCompare(load32(Item + item_Name), FindName) then
      Node := load32(Item + item_Object)
      break
    endif
    Item := load32(Item + item_Next)
  endloop
  return Node
endfun

// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
// Lexer
// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

fun addToken(i32 kind, i32 Value, i32 line, i32 column)
  if not TokenList then
    TokenList := NewList()
  endif
  i32 Token := NewToken()
  store32(Token + token_kind, kind)
  store32(Token + token_Value, Value)
  store32(Token + token_line, line)
  store32(Token + token_column, column)
  listAdd(TokenList, Token)
endfun

fun processToken(i32 Val, i32 line, i32 column)
  i32 kind := tokens_identifier 
  if strcomp1(Val, 40) then kind := tokens_lParen endif
  if strcomp1(Val, 44) then kind := tokens_comma endif
  if strcomp1(Val, 41) then kind := tokens_rParen endif
  if strcomp3(Val, 102, 117, 110) then kind := tokens_fun endif
  if strcomp6(Val, 114, 101, 116, 117, 114, 110) then kind := tokens_return endif
  if strcomp6(Val, 101, 110, 100, 102, 117, 110) then kind := tokens_endfun endif
  if strcomp4(Val, 108, 111, 111, 112) then kind := tokens_loop endif
  if strcomp8(Val, 99, 111, 110, 116, 105, 110, 117, 101) then kind := tokens_continue endif
  if strcomp5(Val, 98, 114, 101, 97, 107) then kind := tokens_break endif
  if strcomp7(Val, 101, 110, 100, 108, 111, 111, 112) then kind := tokens_endloop endif
  if strcomp2(Val, 105, 102) then kind := tokens_if endif
  if strcomp4(Val, 116, 104, 101, 110) then kind := tokens_then endif
  if strcomp4(Val, 101, 108, 115, 101)  then kind := tokens_else endif
  if strcomp5(Val, 101, 110, 100, 105, 102) then kind := tokens_endif endif
  if strcomp3(Val, 105, 51, 50) then kind := tokens_i32 endif
  if strcomp3(Val, 105, 54, 52) then kind := tokens_i64 endif
  if strcomp3(Val, 102, 51, 50) then kind := tokens_f32 endif
  if strcomp3(Val, 102, 54, 52) then kind := tokens_f64 endif
  if strcomp2(Val, 58, 61) then kind := tokens_assign endif
  if strcomp2(Val, 111, 114) then kind := tokens_or endif
  if strcomp3(Val, 97, 110, 100) then kind := tokens_and endif
  if strcomp1(Val, 61) then kind := tokens_eq endif
  if strcomp2(Val, 60, 62) then kind := tokens_ne endif
  if strcomp1(Val, 60) then kind := tokens_lt endif
  if strcomp2(Val, 60, 61) then kind := tokens_le endif
  if strcomp1(Val, 62) then kind := tokens_gt endif
  if strcomp2(Val, 62, 61) then kind := tokens_ge endif
  if strcomp1(Val, 43) then kind := tokens_add endif
  if strcomp1(Val, 45) then kind := tokens_sub endif
  if strcomp1(Val, 42) then kind := tokens_mul endif
  if strcomp1(Val, 47) then kind := tokens_div endif
  if strcomp3(Val, 109, 111, 100) then kind := tokens_mod endif
  if strcomp3(Val, 110, 111, 116) then kind := tokens_not endif
  addToken(kind, Val, line, column)
endfun

fun i32 isWhitespace(i32 chr)
  return chr = 0 or chr = 9 or chr = 13 or chr = 32  // tab, cr, space
endfun

fun i32 isAlpha(i32 chr)
  return (chr >= 65 and chr <= 90) or (chr >= 97 and chr <= 122) or (chr = 95)
endfun

fun i32 isNumber(i32 chr, i32 hex)
  i32 num := 0
  if chr >= 48 and chr <= 57 then
    num := 1
  else
    if hex and chr >= 97 and chr <= 102 then
      num := 1
    endif
  endif
  return num
endfun

fun i32 isPunctuator(i32 chr)
  return chr = 40 or chr = 41 or chr = 44
endfun

fun i32 isOperatorChar(i32 chr)
  return chr = 61 or chr = 43 or chr = 45 or chr = 47 or 
         chr = 60 or chr = 62 or chr = 42 or chr = 58 
endfun

fun lexx(i32 Code)
  i32 pos := 0 - 1
  i32 line := 1
  i32 col := 0
  i32 len := strLen(Code)
  i32 chr := 0
  i32 start := 0
  i32 Val := 0
  i32 hex := 0
  loop
    pos := pos + 1
    col := col + 1
    chr := getchar(Code, pos) 
    if isWhitespace(chr) then continue endif
    if chr = 10 then  // newline
      line := line + 1
      col := 0
      continue
    endif
    if isAlpha(chr) then  
      start := pos
      loop
        if (not isAlpha(chr)) and (not isNumber(chr, 0)) then
          pos := pos - 1
          col := col - 1
          break
        endif
        pos := pos + 1
        col := col + 1
        chr := getchar(Code, pos)
      endloop
      Val := Substring(Code, start, pos - start + 1)
      processToken(Val, line, col)
      continue
    endif
    if isNumber(chr, 0) or ((chr = 45) and isNumber(getchar(Code, pos + 1), 0)) then
      start := pos
      hex := 0
      loop
        if (not isNumber(chr, hex)) and (chr <> 45) then
          if start + 1 = pos and chr = 120 then
            hex := 1
          else
            pos := pos - 1
            col := col - 1
            break
          endif
        endif
        pos := pos + 1
        col := col + 1
        chr := getchar(Code, pos)
      endloop
      Val := Substring(Code, start, pos - start + 1)
      addToken(tokens_numLiteral, Val, line, col)
      continue
    endif
    if (chr = 47) and (getchar(Code, pos + 1) = 47) then
      loop
        if chr = 10 then
          col := 0
          line := line + 1
          break
        endif
        pos := pos + 1
        col := col + 1
        chr := getchar(Code, pos)
      endloop
      continue
    endif
    if isPunctuator(chr) then
      Val := Substring(Code, pos, 1)
      processToken(Val, line, col)
      continue
    endif
    if isOperatorChar(chr) then
      if isOperatorChar(getchar(Code, pos + 1)) then
        Val := Substring(Code, pos, 2)
        pos := pos + 1
        col := col + 1
      else
        Val := Substring(Code, pos, 1)
      endif
      processToken(Val, line, col)
    endif
    if pos >= len then break endif
  endloop
endfun

// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
// Scoper
// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

fun pushScope(i32 Node)
  i32 Scope := NewScope()
  store32(Scope + scope_Node, Node)
  if CurrentScope then
    store32(Scope + scope_index, load32(CurrentScope + scope_index) + 1)
    store32(Scope + scope_Parent, CurrentScope)
  endif
  store32(Node + node_Scope, Scope)
  CurrentScope := Scope
endfun

fun popScope()
  if CurrentScope then
    CurrentScope := load32(CurrentScope + scope_Parent)
  endif
endfun

fun i32 LookupFunctionScope(i32 Scope)
  i32 FunScope := Scope
  loop
    if not FunScope then break endif
    if load32(load32(FunScope + scope_Node) + node_kind) then break endif
    FunScope := load32(FunScope + scope_Parent)
  endloop
  return FunScope
endfun

fun scopeRegister(i32 Scope, i32 Name, i32 Node)
  i32 nodeKind := load32(Node + node_kind)
  i32 FunScope := 0
  i32 nextIndex := 0
  listAddName(load32(Scope + scope_Symbols), Node, Name)
  if nodeKind = nodes_variable or nodeKind = nodes_parameter then
    FunScope := LookupFunctionScope(Scope)
    nextIndex := load32(FunScope + scope_localIndex)
    store32(Node + node_Scope, FunScope)
    store32(Node + node_index, nextIndex)
    store32(FunScope + scope_localIndex, nextIndex + 1)
  endif
endfun

fun i32 ScopeResolve(i32 Scope, i32 Name)
  i32 Node := 0
  i32 RecurseScope := Scope
  loop
    if not RecurseScope then break endif
    Node := ListSearch(load32(RecurseScope + scope_Symbols), Name)
    if Node then break endif
    RecurseScope := load32(RecurseScope + scope_Parent)
  endloop
  return Node
endfun

// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
// Parser
// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

fun next()
  CurrentTokenItem := load32(CurrentTokenItem + item_Next)
  if CurrentTokenItem then
    CurrentToken := load32(CurrentTokenItem + item_Object)
  else
    CurrentToken := 0
  endif
endfun

fun i32 isBinaryOperator(i32 Token)
  i32 kind := load32(Token + token_kind)
  return kind = tokens_assign or kind = tokens_add or kind = tokens_sub or kind = tokens_mul or
         kind = tokens_div or kind = tokens_mod or kind = tokens_or or kind = tokens_and or
         kind = tokens_lt or kind = tokens_eq or kind = tokens_ne or kind = tokens_lt or
         kind = tokens_le or kind = tokens_gt or kind = tokens_ge 
endfun

fun i32 isUnaryOperator(i32 Token)
  i32 kind := load32(Token + token_kind)
  return kind = tokens_sub or kind = tokens_not
endfun

fun i32 isLiteral(i32 Token)
  i32 kind := load32(Token + token_kind)
  return kind = tokens_numLiteral or kind = tokens_identifier
endfun

fun i32 isNativeType(i32 Token)
  i32 kind := load32(Token + token_kind)
  return kind = tokens_i32 or kind = tokens_i64 or kind = tokens_f32 or kind = tokens_f64
endfun

fun eatToken(i32 kind)
  if load32(CurrentToken + token_kind) = kind then
    next() 
  else
    debug(0x99)
    debug(kind)
    debug(load32(CurrentToken + token_kind))
    debug(CurrentToken)
  endif
endfun

fun i32 ParseFunParams()
  i32 Params := NewList()
  i32 type := 0
  i32 FunParamNode := 0
  i32 Name := 0
  eatToken(tokens_lParen)
  loop
    type := load32(CurrentToken + token_kind)
    if type = tokens_rParen then break endif
    next()
    FunParamNode := NewNode()
    store32(FunParamNode + node_kind, nodes_parameter)
    store32(FunParamNode + node_type, type)
    Name := load32(CurrentToken + token_Value)
    store32(FunParamNode + node_String, Name)
    listAddName(Params, FunParamNode, Name)
    next()
    if load32(CurrentToken + token_kind) <> tokens_comma then break endif
    next()
  endloop
  eatToken(tokens_rParen)
  return Params
endfun

fun i32 ParseFunBlock()
  i32 Node := NewNode()
  i32 BodyList := NewList()
  i32 ChildNode := 0
  store32(Node + node_kind, nodes_block)
  store32(Node + node_Nodes, BodyList)
  store32(Node + node_Scope, CurrentScope)
  loop
    if not CurrentToken then break endif
    if load32(CurrentToken + token_kind) = tokens_endfun then break endif
    ChildNode := ParseStatement()
    if not ChildNode then break endif
    listAdd(BodyList, ChildNode)
  endloop
  return Node
endfun

fun i32 ParseFunDeclaration(i32 type, i32 Name)
  i32 Node := NewNode()
  i32 Locals := NewList()
  i32 ParamList := 0
  i32 ParamName := 0
  i32 ParamItem := 0
  store32(Node + node_kind, nodes_fun)
  store32(Node + node_index, funIndex)
  funIndex := funIndex + 1
  store32(Node + node_type, type)
  store32(Node + node_String, Name)
  store32(Node + node_Nodes, Locals)
  scopeRegister(CurrentScope, Name, Node)
  ParamList := ParseFunParams()
  store32(Node + node_ParamNodes, ParamList)
  pushScope(Node)
  ParamItem := load32(ParamList + list_First)
  loop
    if not ParamItem then break endif
    ParamName := load32(ParamItem + item_Name)
    scopeRegister(CurrentScope, ParamName, load32(ParamItem + item_Object))
    ParamItem := load32(ParamItem + item_Next)
  endloop
  store32(Node + node_ANode, ParseFunBlock())
  popScope()
  eatToken(tokens_endfun)
  return Node
endfun

fun i32 ParseFun()
  i32 funType := 0
  i32 Name := 0
  if isNativeType(CurrentToken) then
    funType := load32(CurrentToken + token_kind)
    next()
  endif
  Name := load32(CurrentToken + token_Value)
  next()
  return ParseFunDeclaration(funType, Name)
endfun

fun i32 ParseBreak()
  i32 Node := NewNode()
  store32(Node + node_kind, nodes_break)
  eatToken(tokens_break)
  return Node
endfun

fun i32 ParseContinue()
  i32 Node := NewNode()
  store32(Node + node_kind, nodes_continue)
  eatToken(tokens_continue)
  return Node
endfun

fun i32 ParseLiteral()
  i32 Node := NewNode()
  store32(Node + node_kind, nodes_literal)
  store32(Node + node_String, load32(CurrentToken + token_Value))
  store32(Node + node_type, load32(CurrentToken + token_kind))
  next()
  return Node
endfun

fun i32 ParseCallParams()
  i32 ParamList := NewList()
  eatToken(tokens_lParen)
  loop
    if load32(CurrentToken + token_kind) = tokens_rParen then break endif
    listAdd(ParamList, ParseExpression(tokens_minPrec))
    if load32(CurrentToken + token_kind) <> tokens_comma then break endif
    eatToken(tokens_comma)
  endloop
  eatToken(tokens_rParen)
  return ParamList
endfun

fun i32 ParseCallExpression(i32 Callee)
  i32 Node := NewNode()
  store32(Node + node_kind, nodes_call)
  store32(Node + node_ANode, Callee)
  store32(Node + node_ParamNodes, ParseCallParams())
  return Node
endfun

fun i32 parseUnaryExpression()
  i32 Node := NewNode()
  store32(Node + node_kind, nodes_unary)
  store32(Node + node_type, load32(CurrentToken + token_kind))
  store32(Node + node_String, load32(CurrentToken + token_Value))
  next()
  store32(Node + node_BNode, ParseExpression(tokens_add))
  return Node
endfun

fun i32 ParsePrefix()
  i32 Node := 0
  if isLiteral(CurrentToken) then
    Node := ParseLiteral()
  else
    if load32(CurrentToken + token_kind) = tokens_lParen then
      next()
      Node := ParseExpression(tokens_minPrec)
      eatToken(tokens_rParen)
    else
      if isUnaryOperator(CurrentToken) then
        Node := parseUnaryExpression()
      endif
    endif
  endif
  return Node
endfun

fun i32 ParseBinaryExpression(i32 level, i32 Left)
  i32 Node := 0
  i32 precedence := load32(CurrentToken + token_kind)  // node_kind doubles as the precedence
  if level > precedence then
    Node := Left
  else
    Node := NewNode()
    store32(Node + node_kind, nodes_binary)
    store32(Node + node_type, load32(CurrentToken + token_kind))
    store32(Node + node_String, load32(CurrentToken + token_Value))
    store32(Node + node_ANode, Left)
    next()
    store32(Node + node_BNode, ParseExpression(precedence))
  endif
  return Node
endfun

fun i32 ParseInfix(i32 level, i32 Left)
  i32 Node := 0
  if isBinaryOperator(CurrentToken) then
    Node := ParseBinaryExpression(level, Left)
  else
    if load32(CurrentToken + token_kind) = tokens_lParen then
      Node := ParseCallExpression(Left)
    else
      Node := Left
    endif
  endif
  return Node
endfun

fun i32 ParseExpression(i32 level)
  i32 Node := 0
  i32 Expr := 0
  i32 kind := load32(CurrentToken + token_kind)
  if kind = tokens_break then
    Node := ParseBreak()
  else
    if kind = tokens_continue then
      Node := ParseContinue()
    else
      Node := ParsePrefix()
      loop
        if not CurrentToken then break endif
        Expr := ParseInfix(level, Node)
        if Expr = 0 or Expr = Node then break endif
        Node := Expr
      endloop
    endif
  endif
  return Node
endfun

fun i32 ParseReturnStatement()
  i32 Node := NewNode()
  i32 Scope := 0
  eatToken(tokens_return)
  store32(Node + node_kind, nodes_return)
  store32(Node + node_ANode, ParseExpression(tokens_minPrec))
  Scope := CurrentScope
  loop
    if not Scope then break endif
    if load32(load32(Scope + scope_Node) + node_kind) = nodes_fun then break endif
    Scope := load32(Scope + scope_Parent)
  endloop
  store32(load32(Scope + scope_Node) + node_ANode, Node)
  return Node
endfun

fun i32 ParseIfBlock()
  i32 Node := NewNode()
  i32 BodyList := NewList()
  i32 ChildNode := 0
  store32(Node + node_kind, nodes_block)
  store32(Node + node_Nodes, BodyList)
  store32(Node + node_Scope, CurrentScope)
  loop
    if not CurrentToken then break endif
    if load32(CurrentToken + token_kind) = tokens_else then break endif
    if load32(CurrentToken + token_kind) = tokens_endif then break endif
    ChildNode := ParseStatement()
    if not ChildNode then break endif
    listAdd(BodyList, ChildNode)
  endloop
  return Node
endfun

fun i32 ParseIfStatement()
  i32 Node := NewNode()
  eatToken(tokens_if)
  store32(Node + node_kind, nodes_if)
  store32(Node + node_CNode, ParseExpression(tokens_minPrec))
  eatToken(tokens_then)
  pushScope(Node)
  store32(Node + node_ANode, ParseIfBlock())
  popScope()
  if load32(CurrentToken + token_kind) = tokens_else then
    eatToken(tokens_else)
    pushScope(Node)
    store32(Node + node_BNode, ParseIfBlock())
    popScope()
  endif
  eatToken(tokens_endif)
  return Node
endfun

fun i32 ParseLoopBlock()
  i32 Node := NewNode()
  i32 BodyList := NewList()
  i32 ChildNode := 0
  store32(Node + node_kind, nodes_block)
  store32(Node + node_Nodes, BodyList)
  store32(Node + node_Scope, CurrentScope)
  loop
    if not CurrentToken then break endif
    if load32(CurrentToken + token_kind) = tokens_endloop then break endif
    ChildNode := ParseStatement()
    if not ChildNode then break endif
    listAdd(BodyList, ChildNode)
  endloop
  return Node
endfun

fun i32 ParseLoopStatement()
  i32 Node := NewNode()
  eatToken(tokens_loop)
  store32(Node + node_kind, nodes_loop)
  pushScope(Node)
  store32(Node + node_ANode, ParseLoopBlock())
  popScope()
  eatToken(tokens_endloop)
  return Node
endfun

fun i32 ParseDeclaration()
  i32 FunNode := 0
  i32 FunLocalsList := 0
  i32 type := load32(CurrentToken + token_kind)
  next()
  i32 Name := load32(CurrentToken + token_Value)
  next()
  i32 Node := NewNode()
  store32(Node + node_kind, nodes_variable)
  store32(Node + node_type, type)
  store32(Node + node_String, Name)
  scopeRegister(CurrentScope, Name, Node)
  eatToken(tokens_assign)
  store32(Node + node_BNode, ParseExpression(tokens_minPrec))
  if load32(CurrentScope + scope_Parent) then
    FunNode := load32(LookupFunctionScope(CurrentScope) + scope_Node)
    FunLocalsList := load32(FunNode + node_Nodes)
    if not FunLocalsList then
      FunLocalsList := NewList()
      store32(FunNode + node_Nodes, FunLocalsList)
    endif
    listAdd(FunLocalsList, Node)
  endif
  return Node
endfun

fun i32 ParseStatement()
  i32 Node := 0
  i32 kind := load32(CurrentToken + token_kind)
  if kind = tokens_fun then
    eatToken(tokens_fun)
    Node := ParseFun()
  else
    if isNativeType(CurrentToken) then
      Node := ParseDeclaration()
    else
      if kind = tokens_return then
        Node := ParseReturnStatement()
      else
        if kind = tokens_if then
          Node := ParseIfStatement()
        else
          if kind = tokens_loop then
            Node := ParseLoopStatement()
          else
            Node := ParseExpression(tokens_minPrec)
          endif
        endif
      endif
    endif
  endif
  return Node
endfun

fun parse()
  RootNode := NewNode()
  CurrentTokenItem := load32(TokenList + list_First)
  CurrentToken := load32(CurrentTokenItem + item_Object)
  store32(RootNode + node_kind, nodes_program)
  pushScope(RootNode)
  GlobalScope := CurrentScope  
  i32 Child := 0
  i32 BodyList := NewList()
  store32(RootNode + node_Nodes, BodyList)
  loop
    if not CurrentToken then break endif
    Child := ParseStatement()
    if not Child then break endif
    listAdd(BodyList, Child)
  endloop
endfun

// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
// Compiler
// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

fun i32 strToI32(i32 V)  // works on non-negative ints and 0x0-style hex with lowercase a-f
  i32 hex := 0
  i32 i := 0
  i32 l := strLen(V)
  i32 offset := 0
  i32 c := 0
  if l >= 3 then
    if getchar(V, 0) = 48 and getchar(V, 1) = 120 then
      hex := 1
    endif
  endif
  if hex then
    offset := 2
    loop
      if offset >= l then break endif
      i := i * 16
      c := getchar(V, offset)
      if c >= 48 and c <= 57 then  // 0-9
        i := i + c - 48
      else
        if c >= 97 and c <= 102 then  // a-f
          i := i + c - 97 + 10
        endif
      endif
      offset := offset + 1
    endloop
  else
    loop
      if offset >= l then break endif
      i := i * 10
      c := getchar(V, offset)
      if c >= 48 and c <= 57 then  // 0-9
        i := i + c - 48
      endif
      offset := offset + 1
    endloop
  endif
  return i
endfun

fun emitByte(i32 byte)
  store8(BinaryPointer, byte)
  BinaryPointer := BinaryPointer + 1
endfun

fun emitI32(i32 byte)
  store32(BinaryPointer, byte)
  BinaryPointer := BinaryPointer + 4
endfun

fun i32 uleblen(i32 i)
  i32 len := 0
  if i <= 127 then
    len := 1
  else
    if i <= 16383 then
      len := 2
    else
      if i <= 2097151 then
        len := 3
      else
        if i <= 268435455 then
          len := 4
        else
          len := 5
        endif
      endif
    endif
  endif
  return len
endfun

fun emitUleb(i32 i)  // en.wikipedia.org/wiki/LEB128
  loop
    if i < 128 then break endif
    emitByte(128 + (i mod 128))
    i := i / 128  
  endloop
  emitByte(i)
endfun

fun emitSleb(i32 i)  // en.wikipedia.org/wiki/LEB128
  if i >= 0 then 
    loop
      if i < 64 then break endif
      emitByte(128 + (i mod 128))
      i := i / 128
    endloop
    emitByte(i)
  endif
endfun

fun fixUlebGuess(i32 Start, i32 offset)
  i32 Copy := BinaryPointer
  if offset > 0 then
    loop
      Copy := Copy - 1
      if Copy < Start then break endif
      store8(Copy + offset, load8(Copy))
    endloop
  endif
endfun

fun emitType(i32 Node)
  i32 ParamList := load32(Node + node_ParamNodes)
  emitByte(0x60)  // fun type
  emitUleb(load32(ParamList + list_count)) 
  i32 ParamItem := load32(ParamList + list_First)
  loop
    if not ParamItem then break endif
    emitByte(load32(load32(ParamItem + item_Object) + node_type))
    ParamItem := load32(ParamItem + item_Next)
  endloop
  i32 returnType := load32(Node + node_type)
  if returnType then
    emitByte(0x01)  // return count
    emitByte(returnType)
  else
    emitByte(0x00)  // return count
  endif
endfun

fun emitTypeSection()
  i32 Start := 0
  i32 count := 0
  i32 Item := 0
  i32 Node := 0
  i32 length := 0
  i32 offset := 0
  i32 BodyList := load32(RootNode + node_Nodes)
  i32 Skip := BinaryPointer
  if BodyList then
    if load32(BodyList + list_count) then
      emitByte(0x01)  // Type section
      emitByte(0x00)  // section size (guess)
      Start := BinaryPointer 
      emitByte(0x00)  // types count (guess)  
      count := 0
      Item := load32(BodyList + list_First)
      loop
        Node := load32(Item + item_Object)
        if load32(Node + node_kind) = nodes_fun then
          emitType(Node)
          count := count + 1
          emitFunCount := emitFunCount + 1
        endif
        Item := load32(Item + item_Next)
        if not Item then break endif
      endloop
      length := BinaryPointer - Start
      offset := uleblen(count) + uleblen(length) - 2
      fixUlebGuess(Start, offset)
      BinaryPointer := Start - 1
      emitUleb(length)
      emitUleb(count)
      BinaryPointer := BinaryPointer + length - 1
    endif
  endif
  if not emitFunCount then BinaryPointer := Skip endif
endfun

fun emitFunctionSection()
  i32 Start := 0
  i32 counter := 0
  i32 length := 0
  i32 offset := 0
  if emitFunCount then
    emitByte(0x03)  // Function section
    emitByte(0x00)  // section size (guess)
    Start := BinaryPointer 
    emitUleb(emitFunCount)  // types count
    loop
      if counter >= emitFunCount then break endif
      emitUleb(counter)
      counter := counter + 1
    endloop
    length := BinaryPointer - Start
    offset := uleblen(length) - 1
    fixUlebGuess(Start, offset)
    BinaryPointer := Start - 1
    emitUleb(length)
    BinaryPointer := BinaryPointer + length
  endif
endfun

fun emitMemorySection()
  emitByte(0x05)  // Memory section
  emitUleb(0x03)  // size in bytes
  emitByte(0x01)  // count
  emitByte(0x00)  // resizable flag
  emitByte(0x70)  // pages (one page = 64kb), 0x70 is about 7MB. This program takes about 1MB to compile
endfun

fun emitGlobalSection()
  i32 Start := 0
  i32 count := 0
  i32 Item := 0
  i32 Node := 0
  i32 Value := 0
  i32 length := 0
  i32 offset := 0
  i32 BodyList := load32(RootNode + node_Nodes)
  i32 Skip := BinaryPointer
  if BodyList then
    if load32(BodyList + list_count) then
      emitByte(0x06)  // Section code
      emitByte(0x00)  // Section size (guess)
      Start := BinaryPointer 
      emitByte(0x00)  // globals count (guess)
      Item := load32(BodyList + list_First)
      loop
        Node := load32(Item + item_Object)
        if load32(Node + node_kind) = nodes_variable then
          emitByte(load32(Node + node_type))  // native type
          emitByte(1)  // mutable
          emitByte(65)  // i32_const
          Value := load32(load32(Node + node_BNode) + node_String)
          emitSleb(strToI32(Value))
          emitByte(11)
          count := count + 1
          emitGlobalCount := emitGlobalCount + 1
        endif
        Item := load32(Item + item_Next)
        if not Item then break endif
      endloop
      length := BinaryPointer - Start
      offset := uleblen(count) + uleblen(length) - 2
      fixUlebGuess(Start, offset)
      BinaryPointer := Start - 1
      emitUleb(length)
      emitUleb(count)
      BinaryPointer := BinaryPointer + length - 1
    endif
  endif
  if not emitGlobalCount then BinaryPointer := Skip endif
endfun

fun emitExportSection()
  i32 funCount := 0
  i32 Start := 0
  i32 length := 0
  i32 offset := 0
  i32 BodyList := load32(RootNode + node_Nodes)
  if BodyList then
    funCount := load32(BodyList + list_count)
    if funCount then
      emitByte(0x07)  // Export section
      emitByte(0x00)  // Section size (guess)
      Start := BinaryPointer 
      emitByte(0x02)  // export count - just main fun and memory for now
      emitByte(0x04)  // string of 4 bytes:
      emitByte(0x6d)  // m
      emitByte(0x61)  // a
      emitByte(0x69)  // i
      emitByte(0x6e)  // n
      emitByte(0x00)  // export type: fun
      emitUleb(0x00)  // export the first function as 'main'
      emitByte(0x03)  // string of 3 bytes:
      emitByte(0x6d)  // m
      emitByte(0x65)  // e
      emitByte(0x6d)  // m
      emitByte(0x02)  // export type: memory
      emitByte(0x00)  // memory number 0 
      length := BinaryPointer - Start
      offset := uleblen(length) - 1
      fixUlebGuess(Start, offset)
      BinaryPointer := Start - 1
      emitUleb(length)
      BinaryPointer := BinaryPointer + length
    endif
  endif
endfun

fun emitAssignment(i32 Node)
  i32 ResolvedNode := ScopeResolve(CurrentScope, load32(load32(Node + node_ANode) + node_String))
  emitNode(load32(Node + node_BNode))
  if load32(ResolvedNode + node_Scope) = GlobalScope then
    emitByte(0x24)  // set_global
  else
    emitByte(0x21)  // set_local
  endif
  emitUleb(load32(ResolvedNode + node_index))
endfun

fun emitOperator(i32 type)
  if type = tokens_eq then emitByte(0x46) endif
  if type = tokens_ne then emitByte(0x47) endif
  if type = tokens_lt then emitByte(0x48) endif
  if type = tokens_le then emitByte(0x4c) endif
  if type = tokens_gt then emitByte(0x4a) endif
  if type = tokens_ge then emitByte(0x4e) endif
  if type = tokens_add then emitByte(0x6a) endif
  if type = tokens_sub then emitByte(0x6b) endif
  if type = tokens_mul then emitByte(0x6c) endif
  if type = tokens_div then emitByte(0x6d) endif
  if type = tokens_mod then emitByte(0x6f) endif
  if type = tokens_and then emitByte(0x71) endif
  if type = tokens_or then emitByte(0x72) endif
  if type = tokens_not then emitByte(0x45) endif
endfun

fun emitUnary(i32 Node)
  i32 type := load32(Node + node_type)
  if type = tokens_sub then
    emitByte(0x41)  // i32.const 
    emitByte(0x00)  // 0
  endif
  emitNode(load32(Node + node_BNode))
  emitOperator(type)
endfun

fun emitLiteral(i32 Node)
  i32 type := load32(Node + node_type) 
  i32 num := 0
  i32 ResolvedNode := 0
  if type = tokens_numLiteral then
    emitByte(0x41)  // i32.const
    num := strToI32(load32(Node + node_String))
    emitSleb(num)
  else
    if type = tokens_identifier then
      ResolvedNode := ScopeResolve(CurrentScope, load32(Node + node_String))
      if load32(ResolvedNode + node_Scope) = GlobalScope then
        emitByte(0x23)  // get_global
      else
        emitByte(0x20)  // get_local
      endif
      emitUleb(load32(ResolvedNode + node_index))
    endif
  endif
endfun

fun emitCall(i32 Node)
  i32 ParamList := load32(Node + node_ParamNodes)
  i32 ParamItem := load32(ParamList + list_First)
  i32 ResolvedNode := 0
  loop
    if not ParamItem then break endif
    emitNode(load32(ParamItem + item_Object))
    ParamItem := load32(ParamItem + item_Next)
  endloop
  i32 Name := load32(load32(Node + node_ANode) + node_String)
  if strcomp7(Name, 115, 116, 111, 114, 101, 51, 50) then  // store32
    emitByte(0x36)  // i32.store32
    emitByte(0x00)  // alignment
    emitByte(0x00)  // offset
  else
    if strcomp6(Name, 115, 116, 111, 114, 101, 56) then  // store8
      emitByte(0x3a)  // i32.store8
      emitByte(0x00)  // alignment
      emitByte(0x00)  // offset
    else 
      if strcomp6(Name, 108, 111, 97, 100, 51, 50) then  // load32
        emitByte(0x28)  // i32.load32
        emitByte(0x00)  // alignment
        emitByte(0x00)  // offset
      else
        if strcomp5(Name, 108, 111, 97, 100, 56) then  // load8
          emitByte(0x2d)  // i32.load8
          emitByte(0x00)  // alignment
          emitByte(0x00)  // offset
        else
          ResolvedNode := ScopeResolve(CurrentScope, Name)
          emitByte(0x10)  // call
          emitUleb(load32(ResolvedNode + node_index))
        endif
      endif
    endif
  endif
endfun

fun emitBlock(i32 Node)
  i32 kind := load32(Node + node_kind)
  i32 type := load32(Node + node_type)
  i32 Scope := load32(Node + node_Scope)
  if Scope then
    CurrentScope := Scope
  endif
  i32 BlockList := load32(Node + node_Nodes)
  i32 Item := load32(BlockList + list_First)
  loop
    if not Item then break endif
    emitNode(load32(Item + item_Object))
    Item := load32(Item + item_Next)
  endloop
  if Scope then
    CurrentScope := load32(CurrentScope + scope_Parent)
  endif
endfun

fun emitReturn(i32 Node)
  i32 ExprNode := load32(Node + node_ANode)
  emitNode(ExprNode)
endfun

fun emitIf(i32 Node)
  emitNode(load32(Node + node_CNode))  // condition
  emitByte(0x04)  // if
  emitByte(0x40)  // void
  emitNode(load32(Node + node_ANode))  // then block
  i32 ElseBlock := load32(Node + node_BNode)
  if ElseBlock then
    emitByte(0x05)  // else
    emitNode(ElseBlock)
  endif
  emitByte(0x0b)  // end
endfun

fun i32 loopLevel() 
  i32 Scope := CurrentScope
  i32 level := 0
  loop
    if not Scope then break endif
    if load32(load32(Scope + scope_Node) + node_kind) = nodes_loop then break endif
    level := level + 1
    Scope := load32(Scope + scope_Parent)
  endloop
  return level
endfun

fun emitLoop(i32 Node)
  emitByte(0x02)  // block
  emitByte(0x40)  // void 
  emitByte(0x03)  // loop
  emitByte(0x40)  // void 
  emitNode(load32(Node + node_ANode))
  emitByte(0x0c)  // br
  emitByte(0x00)  // level 
  emitByte(0x0b)  // end
  emitByte(0x0b)  // end
endfun

fun emitBreak(i32 Node)
  emitByte(0x0c)  // br
  emitUleb(loopLevel() + 1)
endfun

fun emitContinue(i32 Node)
  emitByte(0x0c)  // br
  emitUleb(loopLevel())
endfun

fun emitNode(i32 Node)
  i32 kind := load32(Node + node_kind)
  i32 type := load32(Node + node_type)
  if kind = nodes_block then  //0x02
    emitBlock(Node)
  else
    if kind = nodes_binary then
      if type = tokens_assign then
        emitAssignment(Node)
      else
        emitNode(load32(Node + node_ANode))
        emitNode(load32(Node + node_BNode))
        emitOperator(type)
      endif
    else
      if kind = nodes_unary then
        emitUnary(Node)
      else
        if kind = nodes_call then
          emitCall(Node)
        else
          if kind = nodes_return then
            emitReturn(Node)
          else
            if kind = nodes_if then
              emitIf(Node)
            else
              if kind = nodes_loop then
                emitLoop(Node)
              else
                if kind = nodes_break then
                  emitBreak(Node)
                else
                  if kind = nodes_continue then
                    emitContinue(Node)
                  else
                    if kind = nodes_literal then
                      emitLiteral(Node)
                    else
                      if kind = nodes_variable then
                        emitNode(load32(Node + node_BNode))
                        emitByte(0x21)  // set_local
                        emitUleb(load32(Node + node_index))
                      endif
                    endif
                  endif
                endif
              endif
            endif
          endif
        endif
      endif
    endif
  endif
endfun

fun emitFunCode(i32 Node)
  emitByte(0x00)  // function size (guess)
  i32 Start := BinaryPointer
  i32 LocalList := load32(Node + node_Nodes)
  emitUleb(load32(LocalList + list_count))
  i32 LocalItem := load32(LocalList + list_First)
  loop
    if not LocalItem then break endif
    emitByte(0x01)  // count
    emitByte(load32(load32(LocalItem + item_Object) + node_type))
    LocalItem := load32(LocalItem + item_Next)
  endloop
  emitNode(load32(Node + node_ANode))  // body block node
  emitByte(0x0b)  // end
  i32 length := BinaryPointer - Start
  i32 offset := uleblen(length) - 1
  fixUlebGuess(Start, offset)
  BinaryPointer := Start - 1
  emitUleb(length)
  BinaryPointer := BinaryPointer + length
endfun

fun emitCodeSection()
  i32 Start := 0
  i32 BodyList := 0
  i32 FunItem := 0
  i32 FunNode := 0
  i32 length := 0
  i32 offset := 0
  if emitFunCount then
    emitByte(0x0a)  // Code section 
    emitByte(0x00)  // section size (guess)
    Start := BinaryPointer 
    emitUleb(emitFunCount)
    BodyList := load32(RootNode + node_Nodes)
    FunItem := load32(BodyList + list_First)
    loop
      FunNode := load32(FunItem + item_Object)
      if load32(FunNode + node_kind) = nodes_fun then
        emitFunCode(FunNode)
      endif
      FunItem := load32(FunItem + item_Next)
      if not FunItem then break endif
    endloop
    length := BinaryPointer - Start
    offset := uleblen(length) - 1
    fixUlebGuess(Start, offset)
    BinaryPointer := Start - 1
    emitUleb(length)
    BinaryPointer := BinaryPointer + length
  endif
endfun

fun emit(i32 length)
  Binary := NewString(length + 256)  // heuristic: binary will be smaller than len(source) + C
  BinaryPointer := Binary + string_Chars
  CurrentScope := load32(RootNode + node_Scope)
  emitByte(0x00)  // wasm magic 00 61 73 6d
  emitByte(0x61)  // a
  emitByte(0x73)  // s
  emitByte(0x6d)  // m
  emitI32(1)  // wasm version
  emitTypeSection()
  emitFunctionSection()
  emitMemorySection()
  emitGlobalSection()
  emitExportSection()
  emitCodeSection()
  store32(Binary + string_length, BinaryPointer - (Binary + string_Chars)) 
endfun

fun i32 compile()
  i32 len := load32(8)
  i32 ignore := Alloc(8 + len)
  lexx(0)
  parse()
  emit(len)
  return Binary + string_length
endfun
